{"version":3,"sources":["constants.js","utils.js","engine.js","useGlobalState.js","api/index.js","api/firebase.js","toastService.js","components/GameHeader.jsx","components/GameWaitingRoom.jsx","components/Game.jsx","components/HomeHeader.jsx","components/HomeJoin.jsx","components/HomeCreate.jsx","components/Home.jsx","components/Toast.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["SHORT_GAME_KEYS","GG","AA","AG","AB","GA","BA","BB","GB","BG","GAME_LENGHTS","classic","simple","pictures","dixit","deception","KEY_MAPPING","MILITARY_ALPHABET","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","shuffle","list","res","sort","Math","random","WORDS","require","this","_dbRef","gameID","mode","difficulty","players","me","codenames","turn","cluesA","cluesB","keyCardA","keyCardB","whoAmI","reset","setup","state","dataObj","update","dbRef","includes","nickname","push","save","console","log","keyCard","data","gridLength","keyMap","keyArray","Object","entries","reduce","acc","key","count","newArr","Array","fill","quantity","shuffledList","i","length","item","getRandomItems","reverse","initialState","isLoading","game","GameEngine","screen","toast","isVisible","message","useGlobalState","createGlobalState","fb","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","toastService","error","severity","info","success","warning","GameHeader","AppBar","className","position","split","map","letter","join","getMilitaryTranslation","GameWaitingRoom","useEffect","gameEngine","setPlayer","CircularProgress","Game","setDbRef","setGame","setGameID","setIsLoading","setScreen","setToast","API","ref","once","snap","val","firebaseReference","child","handleGameState","on","off","HomeHeader","HomeJoin","tempGameID","setTempGameID","setNickname","useState","isValidGameID","setIsValidGameID","isValidNickname","setIsValidNickname","errorGameID","setErrorGameID","toUpperCase","TextField","required","id","label","onChange","e","target","value","helperText","defaultValue","LinearProgress","Button","variant","color","disabled","onClick","style","background","green","HomeCreate","gameMode","setGameMode","gameDifficulty","setGameDifficulty","createGame","LETTERS","floor","generadeID","init","FormControl","component","FormLabel","RadioGroup","name","FormControlLabel","control","Radio","Home","Toast","handleClose","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","Alert","App","props","Container","maxWidth","startsWith","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.84c5cdea.chunk.js","sourcesContent":["const SHORT_GAME_KEYS = {\n  GG: 2,\n  AA: 1,\n  AG: 1,\n  AB: 1,\n  GA: 1,\n  BA: 1,\n  BB: 3,\n  GB: 3,\n  BG: 3,\n};\n\nconst MEDIUM_GAME_KEYS = {\n  GG: 3,\n  AA: 1,\n  AG: 1,\n  AB: 1,\n  GA: 1,\n  BA: 1,\n  BB: 4,\n  GB: 4,\n  BG: 4,\n};\n\nconst LONG_GAME_KEYS = {\n  GG: 3,\n  AA: 1,\n  AG: 1,\n  AB: 1,\n  GA: 1,\n  BA: 1,\n  BB: 7,\n  GB: 5,\n  BG: 5,\n};\n\nexport const GAME_LENGHTS = {\n  classic: 25,\n  simple: 16,\n  pictures: 20,\n  dixit: 16,\n  deception: 20,\n};\n\nexport const LINE_LENGTHS = {\n  classic: 5,\n  simple: 4,\n  pictures: 5,\n  dixit: 4,\n  deception: 5,\n};\n\nexport const KEY_MAPPING = {\n  classic: LONG_GAME_KEYS,\n  simple: SHORT_GAME_KEYS,\n  pictures: MEDIUM_GAME_KEYS,\n  dixit: SHORT_GAME_KEYS,\n};\n\nexport const MILITARY_ALPHABET = {\n  A: 'alpha',\n  B: 'bravo',\n  C: 'charlie',\n  D: 'delta',\n  E: 'echo',\n  F: 'foxtrot',\n  G: 'golf',\n  H: 'hotel',\n  I: 'india',\n  J: 'juliet',\n  K: 'kilo',\n  L: 'lima',\n  M: 'mike',\n  N: 'november',\n  O: 'oscar',\n  P: 'papa',\n  Q: 'quebek',\n  R: 'romeo',\n  S: 'sierra',\n  T: 'tango',\n  U: 'uniform',\n  V: 'victor',\n  W: 'whiskey',\n  X: 'x-ray',\n  Y: 'yankee',\n  Z: 'zulu',\n};\n","import { MILITARY_ALPHABET } from './constants';\n\nexport const shuffle = (list) => {\n  const res = [...list];\n  res.sort(() => Math.random() - 0.5);\n  return res;\n};\n\nexport const getRandomItems = (list, quantity) => {\n  const shuffledList = shuffle(list);\n  const res = new Array(quantity).fill(null);\n  for (let i = 0; i < res.length; i++) {\n    const item = shuffledList[i];\n    res[i] = item;\n  }\n  return res;\n};\n\nexport const reverseLines = (list, lineSize = 5) => {\n  const arr = [];\n  for (let i = 0; i < list.length; i += lineSize) {\n    arr.push(list.slice(i, i + lineSize));\n  }\n\n  return arr.reduce((acc, eachArr) => {\n    const newArr = eachArr.reverse();\n    return [...acc, ...newArr];\n  }, []);\n};\n\nexport const generadeID = () => {\n  const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  let id = '';\n\n  while (id.length < 4) {\n    id += LETTERS[Math.floor(Math.random() * LETTERS.length)];\n  }\n\n  return id;\n};\n\nexport const getMilitaryTranslation = (gameID = '') => {\n  return gameID\n    .split('')\n    .map((letter) => MILITARY_ALPHABET[letter])\n    .join(' • ');\n};\n\nexport const getKeyClass = (index, side, keys) => {\n  const sideIndex = side === 'A' ? 0 : 1;\n  const key = keys[index][sideIndex];\n  switch (key) {\n    case 'A':\n      return 'assassin';\n    case 'G':\n      return 'agent';\n    default:\n      return 'bystander';\n  }\n};\n","import { GAME_LENGHTS, KEY_MAPPING } from './constants';\nimport { getRandomItems, shuffle } from './utils';\n\nconst WORDS = require('./words');\n\nclass GameEngine {\n  constructor() {\n    this._dbRef = null;\n\n    this.gameID = null;\n    this.mode = null;\n    this.difficulty = null;\n    this.players = [];\n    this.me = null;\n\n    this.codenames = [];\n    this.turn = 0;\n    this.cluesA = [];\n    this.cluesB = [];\n    this.keyCardA = [];\n    this.keyCardB = [];\n    this.whoAmI = 'A';\n  }\n\n  init(gameID, mode, difficulty) {\n    this.reset();\n\n    this.gameID = gameID;\n    this.mode = mode;\n    this.difficulty = difficulty;\n\n    this.setup();\n    return this.state();\n  }\n\n  save(dataObj) {\n    this._dbRef.update(dataObj);\n  }\n\n  setDbRef(dbRef) {\n    this._dbRef = dbRef;\n  }\n\n  setGameID(gameID) {\n    this.gameID = gameID;\n  }\n\n  isMyNicknameSet() {\n    return this.players.includes(this.me);\n  }\n\n  setPlayer(nickname) {\n    if (!this.players.includes(nickname)) {\n      this.players.push(nickname);\n      this.me = nickname;\n      this.save({ players: this.players });\n      console.log('players', this.players);\n      console.log('me', this.me);\n    }\n  }\n\n  state() {\n    return {\n      gameID: this.gameID,\n      mode: this.mode,\n      difficulty: this.difficulty,\n      players: this.players,\n\n      codenames: this.codenames,\n      keyCard: this.keyCard,\n    };\n  }\n\n  update(data) {\n    console.log('%cUpdating game...', 'background:LemonChiffon', data);\n    this.gameID = data.gameID;\n    this.mode = data.mode;\n    this.difficulty = data.difficulty;\n    this.players = data.players || [];\n\n    this.codenames = data.codenames;\n    // this.turn = data.turn;\n    // this.cluesA = data.cluesA;\n    // this.cluesB = data.cluesB;\n    this.keyCard = data.keyCard;\n\n    return this.state();\n  }\n\n  reset() {\n    // TO-DO reset all properties\n  }\n\n  setup() {\n    const gridLength = GAME_LENGHTS[this.mode];\n    const keyMap = KEY_MAPPING[this.mode];\n\n    // Build key card\n    const keyArray = Object.entries(keyMap).reduce((acc, [key, count]) => {\n      const newArr = new Array(count).fill(key);\n      return [...acc, ...newArr];\n    }, []);\n\n    // Set KeyCards\n    this.keyCard = shuffle(keyArray);\n\n    // Set words\n    this.codenames = getRandomItems(WORDS, gridLength);\n  }\n\n  getMyKeys() {\n    return this.whoAmI === 'A' ? this.keyCard : this.keyCard.reverse();\n  }\n\n  //\n}\n\nexport default new GameEngine();\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport GameEngine from './engine';\n\nconst initialState = {\n  gameID: null,\n  nickname: null,\n  isLoading: false,\n  game: GameEngine.state(),\n  dbRef: null,\n  screen: 'home',\n  toast: {\n    isVisible: false,\n    message: '',\n  },\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import fb from './firebase';\n\nexport default fb.database();\n","import firebase from 'firebase';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst fb = firebase.initializeApp(config);\n\nexport default fb;\n","const toastService = {\n  error(toast, message) {\n    return { ...toast, isVisible: true, severity: 'error', message };\n  },\n  info(toast, message) {\n    return { ...toast, isVisible: true, severity: 'info', message };\n  },\n  success(toast, message) {\n    return { ...toast, isVisible: true, severity: 'success', message };\n  },\n  warning(toast, message) {\n    return { ...toast, isVisible: true, severity: 'warning', message };\n  },\n};\n\nexport default toastService;\n","import React from 'react';\nimport { AppBar } from '@material-ui/core';\n\nimport { getMilitaryTranslation } from '../utils';\n\nconst GameHeader = ({ gameID }) => {\n  return (\n    <AppBar className=\"header\" position=\"static\">\n      <div className=\"header__game-id\">game id</div>\n      <h1>{gameID}</h1>\n      <div className=\"header__military-translation\">{getMilitaryTranslation(gameID)}</div>\n    </AppBar>\n  );\n};\n\nexport default GameHeader;\n","import React, { useEffect } from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nconst GameWaitingRoom = () => {\n  const [dbRef, setDbRef] = useGlobalState('dbRef');\n  const [game, setGame] = useGlobalState('game');\n  const [nickname] = useGlobalState('nickname');\n\n  // Set your nickname on mount\n  useEffect(() => {\n    console.log(dbRef);\n    if (dbRef) {\n      gameEngine.setPlayer(nickname);\n    }\n  }, [dbRef, nickname]);\n\n  // Whenever game has two players, go to pre-game\n\n  return (\n    <div className=\"game-waiting-room\">\n      <div>\n        <CircularProgress />\n        <div className=\"game-waiting-room__message\">Waiting for players to join...</div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameWaitingRoom;\n","import React, { useEffect } from 'react';\n\nimport API from '../api';\nimport gameEngine from '../engine';\nimport toastService from '../toastService';\nimport useGlobalState from '../useGlobalState';\n\nimport GameHeader from './GameHeader';\nimport GameWaitingRoom from './GameWaitingRoom';\n\nconst Game = () => {\n  // Global States\n  const [dbRef, setDbRef] = useGlobalState('dbRef');\n  const [game, setGame] = useGlobalState('game');\n  const [gameID, setGameID] = useGlobalState('gameID');\n  const [, setIsLoading] = useGlobalState('isLoading');\n  const [screen, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n\n  // Create database reference\n  useEffect(() => {\n    if (game.gameID === null && gameID) {\n      setIsLoading(true);\n\n      API.ref(`codenombre/${gameID}`).once('value', (snap) => {\n        if (snap.val()) {\n          const firebaseReference = API.ref().child('codenombre').child(gameID);\n          gameEngine.setGameID(gameID);\n          gameEngine.setDbRef(firebaseReference);\n          setDbRef(firebaseReference);\n        } else {\n          setGameID(null);\n          gameEngine.setGameID(null);\n          setToast(toastService.error(toast, 'Failed to start game session'));\n          setScreen('home');\n        }\n\n        setGame(gameEngine.state());\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (dbRef) {\n      const handleGameState = (snap) => {\n        setIsLoading(true);\n        if (snap.val()) {\n          setGame(gameEngine.update(snap.val()));\n        }\n        setIsLoading(false);\n      };\n      dbRef.on('value', handleGameState);\n      return () => {\n        dbRef.off('value', handleGameState);\n        setIsLoading(false);\n        setToast(toastService.info(toast, 'Server disconnected'));\n      };\n    }\n  }, [dbRef, setGame, setIsLoading, setToast, toast]);\n\n  return (\n    <div className=\"game\">\n      <GameHeader gameID={gameID} />\n      <div className=\"game-content\">{screen === 'game.waiting' && <GameWaitingRoom />}</div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport { AppBar } from '@material-ui/core';\n\nconst HomeHeader = ({ gameID }) => {\n  return (\n    <AppBar className=\"header\" position=\"static\">\n      <div className=\"header__game-id\">Welcome to</div>\n      <h1>CODENOMBRE</h1>\n    </AppBar>\n  );\n};\n\nexport default HomeHeader;\n","import React, { useEffect, useState } from 'react';\nimport { TextField, Button, LinearProgress } from '@material-ui/core';\nimport { green } from '@material-ui/core/colors';\n\nimport API from '../api';\nimport useGlobalState from '../useGlobalState';\n\nconst NOOP = () => {};\n\nconst HomeJoin = ({ tempGameID, setTempGameID }) => {\n  // Global States\n  const [gameID, setGameID] = useGlobalState('gameID');\n  const [isLoading, setIsLoading] = useGlobalState('isLoading');\n  const [nickname, setNickname] = useGlobalState('nickname');\n  const [, setScreen] = useGlobalState('screen');\n  // Local States\n  const [isValidGameID, setIsValidGameID] = useState(false);\n  const [isValidNickname, setIsValidNickname] = useState(false);\n  const [errorGameID, setErrorGameID] = useState('');\n\n  useEffect(() => {\n    // Check if game exists\n    if (gameID !== tempGameID && tempGameID?.length === 4) {\n      setIsLoading(true);\n\n      API.ref(`codenombre/${tempGameID.toUpperCase()}`).once('value', (snap) => {\n        if (snap.val()) {\n          setGameID(tempGameID.toUpperCase());\n          setIsValidGameID(true);\n          setErrorGameID('');\n        } else {\n          setErrorGameID('Provided Game ID does not exist. Try again.');\n          setIsValidGameID(false);\n        }\n        setIsLoading(false);\n      });\n    }\n\n    if (tempGameID?.length < 4) {\n      setIsValidGameID(false);\n    }\n\n    // Check if nickname is valid\n    if (nickname?.length >= 3) {\n      setIsValidNickname(true);\n    } else {\n      setIsValidNickname(false);\n    }\n  }, [gameID, tempGameID, setGameID, setIsValidGameID, setIsLoading, nickname, setIsValidNickname]);\n\n  const goToWaitingRoom = () => {\n    setScreen('game.waiting');\n  };\n\n  const goToCreateGame = () => {\n    setScreen('home.create');\n  };\n\n  return (\n    <div className=\"home-section join-game\">\n      <TextField\n        className=\"mui-full-width\"\n        required\n        id=\"nickname\"\n        label=\"Nickname\"\n        onChange={(e) => setNickname(e.target.value)}\n        helperText={\n          nickname && !isValidNickname ? 'Nickname must be at least 3 characters long.' : ''\n        }\n      />\n      <TextField\n        className=\"mui-full-width\"\n        required\n        id=\"game-id\"\n        label=\"Game ID\"\n        onChange={(e) => setTempGameID(e.target.value)}\n        defaultValue={tempGameID}\n        helperText={errorGameID}\n      />\n\n      <div>{isLoading && <LinearProgress />}</div>\n\n      <Button\n        className=\"mui-block\"\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={!isValidNickname || !isValidGameID}\n        onClick={() => goToWaitingRoom()}\n        style={{ background: green[500] }}\n      >\n        Join {gameID}\n      </Button>\n      <div className=\"home-section home-secion--separator\">- or -</div>\n      <div className=\"home-section create-game\">\n        <Button\n          className=\"block\"\n          variant=\"contained\"\n          color=\"default\"\n          onClick={() => goToCreateGame()}\n        >\n          Create a Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeJoin;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Radio,\n  FormControl,\n  RadioGroup,\n  FormControlLabel,\n  FormLabel,\n} from '@material-ui/core';\nimport { green } from '@material-ui/core/colors';\n\nimport API from '../api';\nimport GameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { generadeID } from '../utils';\nimport toastService from '../toastService';\n\nconst HomeCreate = ({ setTempGameID }) => {\n  // Global States\n  const [isLoading, setIsLoading] = useGlobalState('isLoading');\n  const [, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n  // Local States\n  const [gameMode, setGameMode] = useState('classic');\n  const [gameDifficulty, setGameDifficulty] = useState('normal');\n\n  const createGame = () => {\n    setIsLoading(true);\n    const id = generadeID();\n    const state = GameEngine.init(id, gameMode, gameDifficulty);\n\n    try {\n      API.ref('/codenombre').update({\n        [id]: {\n          ...state,\n        },\n      });\n      setTempGameID(id);\n      setToast(toastService.success(toast, `Game created successfully. ID: ${id}`));\n      setIsLoading(false);\n      setScreen('home');\n    } catch {\n      setToast(toastService.error(toast, 'Creating game has failed'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"home-section create-game\">\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" className=\"create-game-label\">\n          Game Type\n        </FormLabel>\n        <RadioGroup name=\"game-type\" value={gameMode} onChange={(e) => setGameMode(e.target.value)}>\n          <FormControlLabel value=\"classic\" control={<Radio />} label=\"Classic\" />\n          <FormControlLabel value=\"simple\" disabled control={<Radio />} label=\"Simple\" />\n          <FormControlLabel value=\"pictures\" disabled control={<Radio />} label=\"Pictures\" />\n          <FormControlLabel value=\"dixit\" disabled control={<Radio />} label=\"Dixit\" />\n          <FormControlLabel value=\"deception\" disabled control={<Radio />} label=\"Deception\" />\n        </RadioGroup>\n        <FormLabel component=\"legend\" className=\"create-game-label\">\n          Difficulty\n        </FormLabel>\n        <RadioGroup\n          name=\"game-difficulty\"\n          value={gameDifficulty}\n          onChange={(e) => setGameDifficulty(e.target.value)}\n        >\n          <FormControlLabel value=\"easy\" control={<Radio />} label=\"Easy\" />\n          <FormControlLabel value=\"normal\" control={<Radio />} label=\"Normal\" />\n        </RadioGroup>\n      </FormControl>\n      <Button\n        className=\"block\"\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ background: green[500] }}\n        onClick={() => createGame()}\n        disabled={isLoading}\n      >\n        Create {gameMode} game\n      </Button>\n    </div>\n  );\n};\n\nexport default HomeCreate;\n","import React, { useState } from 'react';\n\nimport useGlobalState from '../useGlobalState';\n\nimport HomeHeader from './HomeHeader';\nimport HomeJoin from './HomeJoin';\nimport HomeCreate from './HomeCreate';\n\nconst Home = () => {\n  // Global States\n  const [screen] = useGlobalState('screen');\n  // Dependable States\n  const [tempGameID, setTempGameID] = useState('');\n\n  return (\n    <div className=\"home\">\n      <HomeHeader />\n      <div className=\"home-content\">\n        {screen === 'home' && <HomeJoin tempGameID={tempGameID} setTempGameID={setTempGameID} />}\n        {screen === 'home.create' && (\n          <HomeCreate tempGameID={tempGameID} setTempGameID={setTempGameID} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\nimport useGlobalState from '../useGlobalState';\n\nconst Toast = () => {\n  // Global States\n  const [toast, setToast] = useGlobalState('toast');\n\n  const handleClose = () => {\n    setToast({\n      ...toast,\n      isVisible: false,\n    });\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={toast.isVisible}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity={toast.severity}>\n        {toast.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default Toast;\n","import React, { Fragment } from 'react';\nimport { Container, LinearProgress } from '@material-ui/core';\n\nimport useGlobalState from '../useGlobalState';\n\nimport Game from './Game';\nimport Home from './Home';\nimport Toast from './Toast';\n\nconst App = (props) => {\n  // Global States\n  const [isLoading] = useGlobalState('isLoading');\n  const [screen] = useGlobalState('screen');\n\n  return (\n    <Fragment>\n      <Container maxWidth=\"lg\">\n        {isLoading ? <LinearProgress /> : <div className=\"progress-bar-placeholder\" />}\n        {screen.startsWith('home') && <Home />}\n        {screen.startsWith('game') && <Game />}\n      </Container>\n      <Toast />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n// import Home from './components/Home';\n// import Admin from './components/Admin';\n// import Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\n// function Container() {\n//   return (\n//     <Router>\n//       <App>\n//         <Switch>\n//           <Route path=\"/create\" component={Admin} />\n//           <Route path=\"/:gameid\" component={Game} />\n//           <Route exact path=\"/\" component={Home} />\n//         </Switch>\n//       </App>\n//     </Router>\n//   );\n// }\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}