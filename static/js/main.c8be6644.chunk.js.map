{"version":3,"sources":["components/PopUp.jsx","constants.js","utils.js","api/mock-turns.js","engine.js","useGlobalState.js","api/index.js","api/firebase.js","toastService.js","components/OnlineBadge.jsx","components/GameHeader.jsx","components/GameTimeline.jsx","components/GameInstructions.jsx","components/GameChat.jsx","components/Card.jsx","components/GameBoard.jsx","components/GameActions.jsx","components/GameSession.jsx","components/GameWaitingRoom.jsx","components/Game.jsx","localStorage.js","components/HomeHeader.jsx","components/HomeJoin.jsx","components/HomeCreate.jsx","components/Home.jsx","components/Toast.jsx","components/App.jsx","serviceWorker.js","index.js","images/card-agent.jpg","images/card-assassin.jpg","images/card-bystander.jpg"],"names":["closePopUpTimer","SHORT_GAME_KEYS","GG","AA","AG","AB","GA","BA","BB","GB","BG","GAME_LENGHTS","classic","simple","pictures","dixit","deception","KEY_MAPPING","MILITARY_ALPHABET","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","shuffle","list","res","sort","Math","random","basics","codenames","difficulty","gameID","keyCard","mode","players","turnOrder","timestamps","turn","phase","mock","messages","mockMessages","num","clues","Array","fill","map","entry","index","clue","number","floor","user","mockTurns","set","now","Date","WORDS","require","dialogs","this","_dbRef","online","me","guesses","_tempSaveObj","_interval","reset","setup","state","ONE_MINUTE","console","warn","setInterval","save","clearInterval","dataObj","delaySave","log","myDatabaseIndex","update","data","gridLength","keyMap","keyArray","Object","entries","reduce","acc","key","count","newArr","quantity","shuffledList","i","length","item","getRandomItems","dbRef","nickname","isGameFull","Error","includes","push","reverse","clueObj","player","guessIndex","guessResult","allyDatabaseIndex","turnNumber","findIndex","p","amISet","myTurnIndex","turnRole","initialState","isLoading","game","GameEngine","screen","toast","isVisible","message","dialog","useGlobalState","createGlobalState","fb","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","toastService","error","severity","info","success","warning","OnlineBadge","isOnline","name","Badge","color","overlap","anchorOrigin","vertical","horizontal","variant","className","Avatar","GameHeader","allyShortNickname","gameEngine","allysName","substring","AppBar","position","IconButton","aria-label","onClick","split","letter","join","getMilitaryTranslation","rounds","c","GameTimeline","round","style","yellow","green","fontSize","GameInstructions","texts","text","GameChat","messageEntry","InnerCard","codename","imageSource","type","src","alt","Card","codenameID","size","keyClass","isButton","cardAgent","cardAssassin","cardBystander","getImageSource","submitGuess","GameBoard","showButtons","side","keys","getKeyClass","startsWith","GameActions","useState","setClue","handleClue","value","isClueReady","Button","background","setTurnOrder","TextField","id","label","inputProps","autocomplete","onChange","e","target","min","max","step","disabled","submitClue","CircularProgress","GameSession","setDialog","useEffect","duration","GameWaitingRoom","setGameID","setScreen","setToast","setPlayer","err","setMe","every","s","isEveryoneOnline","Game","setDbRef","setGame","setIsLoading","setOnline","API","ref","once","snap","val","firebaseReference","child","on","updateOnline","handleGameDisconnect","off","store","isLoaded","init","load","get","localStorage","JSON","parse","window","getItem","forEach","undefined","notLoaded","setItem","stringify","HomeHeader","HomeJoin","tempGameID","setTempGameID","tempNickname","setNickname","isValidGameID","setIsValidGameID","isValidNickname","setIsValidNickname","errorGameID","setErrorGameID","toUpperCase","required","defaultValue","helperText","maxLength","LinearProgress","localStorageService","setDefaults","HomeCreate","gameMode","setGameMode","gameDifficulty","setGameDifficulty","createGame","LETTERS","generadeID","FormControl","component","FormLabel","RadioGroup","FormControlLabel","control","Radio","Home","getDefaults","lsGameID","lsNickname","Transition","forwardRef","props","Zoom","direction","PopUp","handleClose","clearTimeout","timer","setTimeout","Dialog","open","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","Toast","Snackbar","autoHideDuration","Alert","App","Container","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"olCAQIA,E,kGCREC,EAAkB,CACtBC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GA2BOC,EAAe,CAC1BC,QAAS,GACTC,OAAQ,GACRC,SAAU,GACVC,MAAO,GACPC,UAAW,IAWAC,EAAc,CACzBL,QA7BqB,CACrBV,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAqBJG,OAAQZ,EACRa,SA3CuB,CACvBZ,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,GAmCJK,MAAOd,GAGIiB,EAAoB,CAC/BC,EAAG,QACHC,EAAG,QACHC,EAAG,UACHC,EAAG,QACHC,EAAG,OACHC,EAAG,UACHC,EAAG,OACHC,EAAG,QACHC,EAAG,QACHC,EAAG,SACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,WACHC,EAAG,QACHC,EAAG,OACHC,EAAG,SACHC,EAAG,QACHC,EAAG,SACHC,EAAG,QACHC,EAAG,UACHC,EAAG,SACHC,EAAG,UACHC,EAAG,QACHC,EAAG,SACHC,EAAG,QCnFQC,EAAU,SAACC,GACtB,IAAMC,EAAG,YAAOD,GAEhB,OADAC,EAAIC,MAAK,kBAAMC,KAAKC,SAAW,MACxBH,GCmDHI,EAAS,CACbC,UAzDgB,CAChB,UACA,OACA,SACA,QACA,UACA,OACA,UACA,aACA,SACA,MACA,MACA,QACA,WACA,WACA,QACA,SACA,QACA,MACA,MACA,YACA,OACA,OACA,QACA,SACA,UAiCAC,WAAY,SACZC,OAAQ,OACRC,QAhCc,CACd,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAQAC,KAAM,UACNC,QAAS,CAAC,QAAS,UACnBC,UAAW,CAAC,QAAS,UACrBC,WAAY,CAAC,EAAG,GAChBC,KAAM,EACNC,MAAO,QACPC,MAAM,EACNC,SAAU,IAGNC,EAAe,SAACC,GACpB,IAAMC,EAAQ,CACZ,WACA,QACA,QACA,WACA,OACA,eACA,OACA,UACA,SACA,QACA,MACA,OACA,OACA,QACA,QACA,SACA,QACA,MACA,SACA,cACA,OACA,QACA,SACA,aACA,QACA,SACA,OACA,WAGF,OAAO,IAAIC,MAAMF,GAAKG,KAAK,KAAKC,KAAI,SAACC,EAAOC,GAC1C,MAAO,CACLC,KAAMN,EAAMK,GACZE,OAAQxB,KAAKyB,MAAsB,EAAhBzB,KAAKC,UACxByB,KAAMxB,EAAOO,UAAUa,EAAQ,QAuDtBK,EAlDG,SAACC,GACjB,IAAMC,EAAMC,KAAKD,MAEjB,OAAQD,GACN,IAAK,QACH,OAAO,eACF1B,EADL,CAEEQ,WAAY,CAACmB,EAAKA,GAClBlB,KAAM,EACNC,MAAO,UAEX,IAAK,oBACH,OAAO,eACFV,EADL,CAEEQ,WAAY,CAACmB,EAAKA,GAClBlB,KAAM,EACNC,MAAO,gBAEX,IAAK,iBACH,OAAO,eACFV,EADL,CAEEQ,WAAY,CAACmB,EAAKA,GAClBlB,KAAM,EACNC,MAAO,WACPE,SAAUC,EAAa,KAE3B,IAAK,oBACH,OAAO,eACFb,EADL,CAEEQ,WAAY,CAACmB,EAAKA,GAClBlB,KAAM,EACNC,MAAO,cACPE,SAAUC,EAAa,MAE3B,IAAK,iBACH,OAAO,eACFb,EADL,CAEEQ,WAAY,CAACmB,EAAKA,GAClBlB,KAAM,EACNC,MAAO,WACPE,SAAUC,EAAa,KAE3B,QACE,OAAO,eACFb,EADL,CAEEQ,WAAY,CAACmB,EAAKA,OCzJpBE,EAAQC,EAAQ,KAIhBC,EAEF,kLAFEA,EAIF,2LAJEA,EAMF,gHANEA,EAQF,oNAREA,EAUF,kGAVEA,EAWQ,sCAXRA,EAYU,gCAkUD,M,WA9Tb,aAAe,oBACbC,KAAKC,OAAS,KAEdD,KAAK7B,OAAS,KACd6B,KAAK3B,KAAO,KACZ2B,KAAK9B,WAAa,KAClB8B,KAAK1B,QAAU,GACf0B,KAAKE,OAAS,EAAC,GAAO,GACtBF,KAAKxB,WAAa,CAAC,EAAG,GACtBwB,KAAKG,GAAK,KACVH,KAAKvB,KAAO,EACZuB,KAAKzB,UAAY,GACjByB,KAAKtB,MAAQ,QACbsB,KAAKpB,SAAW,GAChBoB,KAAK/B,UAAY,GACjB+B,KAAKI,QAAU,GAEfJ,KAAKK,aAAe,KACpBL,KAAKM,UAAY,K,iDAqHdnC,EAAQE,EAAMH,GASjB,OARA8B,KAAKO,QAELP,KAAK7B,OAASA,EACd6B,KAAK3B,KAAOA,EACZ2B,KAAK9B,WAAaA,EAElB8B,KAAKQ,QAEER,KAAKS,Q,qCAKZ,OADAT,KAAKE,OAASF,KAAKxB,WAAWU,KAAI,SAACC,GAAD,OAAWS,KAAKD,MAAQR,EAAQuB,OAC3DV,KAAKE,S,kCAGD,IAAD,OACLF,KAAKM,UASRK,QAAQC,KAAK,2CARbZ,KAAKM,UAAYO,aAAY,WACvB,EAAKZ,SACP,EAAKa,KAAL,eAAe,EAAKT,eACpB,EAAKA,aAAe,KACpBU,cAAc,EAAKT,cAEpB,O,6BAMa,IAAfU,EAAc,uDAAJ,GACb,IAAKhB,KAAKC,OAER,OADAD,KAAKK,aAAeW,EACbhB,KAAKiB,YAGdN,QAAQO,IAAI,cAAe,yBAA0BF,GAGrDhB,KAAKxB,WAAWwB,KAAKmB,iBAAmBvB,KAAKD,MAE7CK,KAAKC,OAAOmB,OAAZ,eACKJ,EADL,CAEExC,WAAYwC,EAAQrC,KAAOqC,EAAQxC,WAAawB,KAAKxB,gB,6BAIlD6C,GAgBL,OAfAV,QAAQO,IAAI,qBAAsB,yBAA0BG,GAC5DrB,KAAK7B,OAASkD,EAAKlD,OACnB6B,KAAK3B,KAAOgD,EAAKhD,KACjB2B,KAAK9B,WAAamD,EAAKnD,WACvB8B,KAAK1B,QAAU+C,EAAK/C,SAAW,GAC/B0B,KAAKxB,WAAa6C,EAAK7C,YAAc,CAAC,EAAG,GACzCwB,KAAKvB,KAAO4C,EAAK5C,KACjBuB,KAAKtB,MAAQ2C,EAAK3C,MAClBsB,KAAKzB,UAAY8C,EAAK9C,WAAa,GAEnCyB,KAAKpB,SAAWyC,EAAKzC,UAAY,GAEjCoB,KAAK/B,UAAYoD,EAAKpD,UACtB+B,KAAK5B,QAAUiD,EAAKjD,QAEb4B,KAAKS,Q,+DAQZ,IAAMa,EAAa9F,EAAawE,KAAK3B,MAC/BkD,EAASzF,EAAYkE,KAAK3B,MAG1BmD,EAAWC,OAAOC,QAAQH,GAAQI,QAAO,SAACC,EAAD,GAAwB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KAC9DC,EAAS,IAAI/C,MAAM8C,GAAO7C,KAAK4C,GACrC,MAAM,GAAN,mBAAWD,GAAX,YAAmBG,MAClB,IAGH/B,KAAK5B,QAAUV,EAAQ8D,GAGvBxB,KAAK/B,UF5OqB,SAACN,EAAMqE,GAGnC,IAFA,IAAMC,EAAevE,EAAQC,GACvBC,EAAM,IAAIoB,MAAMgD,GAAU/C,KAAK,MAC5BiD,EAAI,EAAGA,EAAItE,EAAIuE,OAAQD,IAAK,CACnC,IAAME,EAAOH,EAAaC,GAC1BtE,EAAIsE,GAAKE,EAEX,OAAOxE,EEqOYyE,CAAexC,EAAOyB,K,+BAKhCgB,GACFtC,KAAKC,SACRD,KAAKC,OAASqC,K,gCAIRnE,GACR6B,KAAK7B,OAASA,I,gCAKNoE,GAGR,GAFAvC,KAAKG,GAAKoC,EAENvC,KAAKwC,WACP,MAAMC,MAAM,yCAGTzC,KAAK1B,QAAQoE,SAASH,GAIzBvC,KAAKc,QAHLd,KAAK1B,QAAQqE,KAAKJ,GAClBvC,KAAKc,KAAK,CAAExC,QAAS0B,KAAK1B,a,4BAMxBiE,GACCvC,KAAKG,KAAIH,KAAKG,GAAKoC,GAExBvC,KAAKc,S,qCAIL,IAAMvC,EAAqC,IAAzByB,KAAKmB,gBAAL,YAAiCnB,KAAK1B,SAAW,YAAI0B,KAAK1B,SAASsE,UACrF5C,KAAKc,KAAK,CACRvC,YACAE,KAAMuB,KAAKvB,KAAO,EAClBC,MAAO,kB,iCAIAmE,GACT7C,KAAKc,KAAK,CACRpC,MAAO,WACPE,SAAS,GAAD,mBACHoB,KAAKpB,UADF,CAEN,CACES,KAAMwD,EAAQxD,KACdC,OAAQuD,EAAQvD,QAAU,EAC1BwD,OAAQ9C,KAAKG,U,kCAMT4C,GAEV,IAAMC,EAAchD,KAAK5B,QAAQ2E,GAAY/C,KAAKiD,mBAIlD,OAHAtC,QAAQO,IAAI,MAAOlB,KAAK5B,QAAQ2E,IAChCpC,QAAQO,IAAI,UAAW8B,GAEfA,GACN,IAAK,IACHrC,QAAQO,IAAI,UAMZ,MACF,IAAK,IACHP,QAAQO,IAAI,UAEZ,MACF,IAAK,IACHP,QAAQO,IAAI,UAGZ,MACF,QACEP,QAAQO,IAAI,a,2DAObgC,GACHlD,KAAKc,KAAKrB,EAAUyD,M,sCA/RC,IAAD,OACpB,OAAOlD,KAAK1B,QAAQ6E,WAAU,SAACC,GAAD,OAAOA,IAAM,EAAKjD,Q,wCAOzB,IAAD,OACtB,OAAOH,KAAKzB,UAAU4E,WAAU,SAACC,GAAD,OAAOA,IAAM,EAAKjD,Q,kCAOjC,IAAD,OAChB,OAAOH,KAAKzB,UAAU4E,WAAU,SAACC,GAAD,OAAOA,IAAM,EAAKjD,Q,kCAOjC,IAAD,OAChB,OAAOH,KAAKzB,UAAU4E,WAAU,SAACC,GAAD,OAAOA,IAAM,EAAKjD,Q,gCAQlD,OAAOH,KAAK1B,QAAQ0B,KAAKiD,oBAAsB,O,iCAQ/C,OAAQjD,KAAKqD,QAAkC,IAAxBrD,KAAK1B,QAAQ6D,S,6BAQpC,OAAOnC,KAAKG,IAAMH,KAAK1B,QAAQoE,SAAS1C,KAAKG,M,+BAQ7C,OAAOH,KAAKvB,KAAO,IAAMuB,KAAKsD,YAAc,UAAY,W,6BAQxD,OAAQtD,KAAKtB,OACX,IAAK,QACH,OAAOqB,EACT,IAAK,cACH,MAAyB,WAAlBC,KAAKuD,SAAwBxD,EAAmBA,EACzD,IAAK,WACH,MAAyB,WAAlBC,KAAKuD,SAAwBxD,EAAoBA,EAC1D,IAAK,cACH,MAAyB,WAAlBC,KAAKuD,SAAwBxD,EAAqBA,EAC3D,QACE,MAAO,M,4BASX,MAAO,CACL5B,OAAQ6B,KAAK7B,OACbE,KAAM2B,KAAK3B,KACXH,WAAY8B,KAAK9B,WACjBI,QAAS0B,KAAK1B,QACdE,WAAYwB,KAAKxB,WACjBC,KAAMuB,KAAKvB,KACXC,MAAOsB,KAAKtB,MACZE,SAAUoB,KAAKpB,UAAY,GAC3BL,UAAWyB,KAAKzB,UAChBN,UAAW+B,KAAK/B,UAChBG,QAAS4B,KAAK5B,a,cC9IdoF,EAAe,CACnBrF,OAAQ,KACRoE,SAAU,KACVkB,WAAW,EACXC,KAAMC,EAAWlD,MACjB6B,MAAO,KACPsB,OAAQ,OACRC,MAAO,CACLC,WAAW,EACXC,QAAS,IAEXC,OAAQ,CACNF,WAAW,EACXC,QAAS,IAEX7D,OAAQ,EAAC,GAAO,IAKH+D,EAFYC,4BAAkBV,GAArCS,e,iBCpBOE,G,OCYJC,IAASC,cAXL,CACbC,OAAQC,0CACRC,WAAYD,+BACZE,YAAaF,sCACbG,UAAWH,eACXI,cAAeJ,2BACfK,kBAAmBL,eACnBM,MAAON,4CACPO,cAAeP,iBDTCQ,YEaHC,EAfM,CACnBC,MADmB,SACbpB,EAAOE,GACX,OAAO,eAAKF,EAAZ,CAAmBC,WAAW,EAAMoB,SAAU,QAASnB,aAEzDoB,KAJmB,SAIdtB,EAAOE,GACV,OAAO,eAAKF,EAAZ,CAAmBC,WAAW,EAAMoB,SAAU,OAAQnB,aAExDqB,QAPmB,SAOXvB,EAAOE,GACb,OAAO,eAAKF,EAAZ,CAAmBC,WAAW,EAAMoB,SAAU,UAAWnB,aAE3DsB,QAVmB,SAUXxB,EAAOE,GACb,OAAO,eAAKF,EAAZ,CAAmBC,WAAW,EAAMoB,SAAU,UAAWnB,c,qDCU9CuB,EAjBK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAC/B,OACE,kBAACC,EAAA,EAAD,CACEC,MAAM,YACNC,QAAQ,SACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,QAAQ,MACRC,UAAS,gBAAWT,EAAW,gBAAkB,mBAEjD,kBAACU,EAAA,EAAD,KAAST,KCoBAU,EAzBI,SAAC,GAAgB,IAAd/H,EAAa,EAAbA,OAAa,EAChB8F,EAAe,UAAzB/D,EAD0B,oBAG3BiG,EAAoBC,EAAWC,UAAUC,UAAU,EAAG,GAE5D,OACE,kBAACC,EAAA,EAAD,CAAQP,UAAU,sBAAsBQ,SAAS,UAC/C,yBAAKR,UAAU,qBACb,kBAACS,EAAA,EAAD,CAAYC,aAAW,SAASC,QAAS,kBAAMP,EAAWtF,SACxD,kBAAC,IAAD,QAGJ,yBAAKkF,UAAU,uBACb,yBAAKA,UAAU,mBAAf,WACA,4BAAK7H,GACL,yBAAK6H,UAAU,gCRgBe,WAAkB,IAAjB7H,EAAgB,uDAAP,GAC9C,OAAOA,EACJyI,MAAM,IACN1H,KAAI,SAAC2H,GAAD,OAAY9K,EAAkB8K,MAClCC,KAAK,YQpB6CC,CAAuB5I,KAExE,yBAAK6H,UAAU,sBACb,kBAAC,EAAD,CAAaR,KAAMW,EAAmBZ,SAAUrF,EAAOkG,EAAWnD,qBAClE,kBAAC,EAAD,CAAauC,KAAK,KAAKD,SAAUrF,EAAOkG,EAAWjF,sB,kCCxBrD6F,EAAS,IAAIhI,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAAC+H,EAAG/E,GAAJ,OAAUA,EAAI,KAsB3CgF,EApBM,WAAM,MAEVjD,EAAe,QAAvBP,EAFkB,oBAIzB,OACE,yBAAKsC,UAAU,+BACZgB,EAAO9H,KAAI,SAACiI,EAAO/H,GAAR,OACV,yBAAKyC,IAAG,kBAAasF,EAAb,YAAsB/H,GAAS4G,UAAU,wBAC/C,0BAAMA,UAAU,+BAA+BmB,GAC/C,kBAAC,IAAD,CACEnB,UAAU,eACVoB,MAAO1D,EAAKjF,KAAO,IAAMW,EAAQ,CAAEsG,MAAO2B,IAAO,KAAQ,CAAE3B,MAAO4B,IAAM,MACxEC,SAAS,gBCDNC,EAfU,WACvB,IAAMC,EAAQrB,EAAWpC,OAAO4C,MAAM,QAEtC,OACE,yBAAKZ,UAAU,sCACb,4CACA,yBAAKA,UAAU,cACZyB,EAAMvI,KAAI,SAACwI,GAAD,OACT,uBAAG7F,IAAK6F,GAAOA,SCuBVC,GA9BE,WAAM,MAEN1D,EAAe,QAAvBP,EAFc,oBAIrB,OACE,yBAAKsC,UAAU,uBACZtC,EAAK9E,UACJ8E,EAAK9E,SAASM,KAAI,SAAC0I,EAAcxI,GAC/B,OAAIwI,EAAapI,OAAS4G,EAAWjG,GAEjC,yBAAK0B,IAAG,UAAK+F,EAAavI,KAAlB,YAA0BD,GAAS4G,UAAU,wBACnD,0BAAMA,UAAU,gBACb4B,EAAavI,KADhB,KACwBuI,EAAatI,SAOzC,yBAAKuC,IAAG,UAAK+F,EAAavI,KAAlB,YAA0BD,GAAS4G,UAAU,yBACnD,0BAAMA,UAAU,gBACb4B,EAAavI,KADhB,KACwBuI,EAAatI,c,4DCa7CuI,GAAY,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAUrH,EAA+B,EAA/BA,MAAOsH,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjD,OAAQvH,GACN,IAAK,cAQL,IAAK,eAQL,QACE,OACE,oCACE,yBAAKuF,UAAU,uBAAuBiC,IAAKF,EAAaG,IAAKH,IACnD,SAATC,GAAmB,0BAAMhC,UAAU,kBAAkB8B,GAC5C,SAATE,GAAmB,0BAAMhC,UAAU,8BAA8B8B,MAM7DK,GAjDF,SAAC,GAAqE,IAAnEL,EAAkE,EAAlEA,SAAUM,EAAwD,EAAxDA,WAAYJ,EAA4C,EAA5CA,KAAMK,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAU9H,EAAY,EAAZA,MAC9DsH,EAZe,SAACO,GACtB,OAAQA,GACN,IAAK,QACH,OAAOE,KACT,IAAK,WACH,OAAOC,KACT,QACE,OAAOC,MAKSC,CAAeL,GAEnC,OAAIC,EAEA,4BACEvC,UAAS,8CAAyCgC,EAAzC,sBAA2DK,EAA3D,sBAA6EC,GACtF3B,QAAS,kBAAMP,EAAWwC,YAAYR,KAEtC,kBAAC,GAAD,CAAWN,SAAUA,EAAUrH,MAAOA,EAAOsH,YAAaA,EAAaC,KAAMA,KAKjF,yBAAKhC,UAAS,6BAAwBgC,EAAxB,sBAA0CK,EAA1C,sBAA4DC,IACxE,kBAAC,GAAD,CAAWR,SAAUA,EAAUrH,MAAOA,EAAOsH,YAAaA,EAAaC,KAAMA,MCIpEa,GA7BG,WAAM,MAEP5E,EAAe,QAAvBP,EAFe,oBAIhBoF,EAA6B,aAAfpF,EAAKhF,OAAgD,YAAxB0H,EAAW7C,SAE5D,OACE,yBAAKyC,UAAU,iCACZtC,EAAKzF,UAAUiB,KAAI,SAAC4I,EAAU1I,GAC7B,IAAMkJ,Eb+Ba,SAAClJ,EAAO2J,EAAMC,GAEvC,OADYA,EAAK5J,GAAO2J,IAEtB,IAAK,IACH,MAAO,WACT,IAAK,IACH,MAAO,QACT,QACE,MAAO,aavCYE,CAAY7J,EAAOgH,EAAWjF,gBAAiBuC,EAAKtF,SAE/DmK,EAAWO,IADH,GACyBI,WAAW,WAClD,OACE,kBAAC,GAAD,CACErH,IAAKiG,EACLA,SAAUA,EACVM,WAAYhJ,EACZ4I,KAAK,OACLK,KAAM,EACNC,SAAUA,EACVC,SAAUA,EACV9H,MAXU,U,kDCoFP0I,GA5FK,WAAM,MAETlF,EAAe,QAAvBP,EAFiB,sBAIA0F,mBAAS,CAAE/J,KAAM,KAAMC,OAAQ,OAJ/B,mBAIjBD,EAJiB,KAIXgK,EAJW,KAMlBC,EAAa,SAACtB,EAAMuB,GACpBA,IACW,SAATvB,EACFqB,EAAQ,eAAKhK,EAAN,CAAYA,KAAMkK,KACP,WAATvB,GACTqB,EAAQ,eAAKhK,EAAN,CAAYC,OAAQiK,OAS3BC,EAAcnK,EAAKA,OAASA,EAAKA,KAAKqD,SAAS,MAAQrD,EAAKC,QAAU,EAE5E,OACE,yBAAK0G,UAAU,6BACG,UAAftC,EAAKhF,OACJ,yBAAKsH,UAAU,sDACb,kBAACyD,GAAA,EAAD,CACEzD,UAAU,YACVD,QAAQ,YACRL,MAAM,UACN0B,MAAO,CAAEsC,WAAYpC,IAAM,MAC3BX,QAAS,kBAAMP,EAAWuD,iBAL5B,qBAYY,gBAAfjG,EAAKhF,OAAmD,WAAxB0H,EAAW7C,UAC1C,yBAAKyC,UAAU,4DACb,kBAAC4D,GAAA,EAAD,CACE5D,UAAU,QACV6D,GAAG,OACHC,MAAM,OACNC,WAAY,CAAEC,aAAc,OAC5BC,SAAU,SAACC,GAAD,OAAOZ,EAAW,OAAQY,EAAEC,OAAOZ,UAE/C,kBAACK,GAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,SACN9B,KAAK,SACL+B,WAAY,CAAEK,IAAK,IAAKC,IAAK,KAAMC,KAAM,KACzCL,SAAU,SAACC,GAAD,OAAOZ,EAAW,UAAWY,EAAEC,OAAOZ,UAElD,kBAACE,GAAA,EAAD,CACEzD,UAAU,QACVD,QAAQ,YACRL,MAAM,UACN6E,UAAWf,EACXpC,MAAO,CAAEsC,WAAYpC,IAAM,MAC3BX,QA5Ce,WACvBP,EAAWoE,WAAWnL,KA6Cd,kBAAC,KAAD,QAKU,aAAfqE,EAAKhF,OAAgD,YAAxB0H,EAAW7C,UACvC,yBAAKyC,UAAU,yDACb,kBAACyD,GAAA,EAAD,CACEzD,UAAU,QACVD,QAAQ,YACRL,MAAM,UACN6E,UAAU,EACVnD,MAAO,CAAEsC,WAAYpC,IAAM,MAC3BX,QAAS,kBA7EFhG,QAAQO,IAAI,QAuErB,UAac,gBAAfwC,EAAKhF,OAAmD,YAAxB0H,EAAW7C,UAC5B,aAAfG,EAAKhF,OAAgD,WAAxB0H,EAAW7C,WACzC,yBAAKyC,UAAU,wDACb,kBAACyE,GAAA,EAAD,CAAkBrD,MAAO,CAAE1B,MAAO4B,IAAM,WChEnCoD,GArBK,WAAM,MAEFzG,EAAe,UAA5B0G,EAFe,oBAIhB3G,EAAWoC,EAAXpC,OAMR,OAJA4G,qBAAU,WACRD,EAAU,CAAE7G,WAAW,EAAM+G,SAAU,OAAQ9G,QAASC,MACvD,CAACA,EAAQ2G,IAGV,yBAAK3E,UAAU,6BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QC0BS8E,GA5CS,WAAO,IAAD,EACZ7G,EAAe,SAAxB3B,EADqB,sBAEb2B,EAAe,QAAvBP,EAFqB,sBAGNO,EAAe,UAA5B8G,EAHmB,sBAIT9G,EAAe,YAA3B1B,EAJqB,sBAKX0B,EAAe,UAAzB/D,EALqB,sBAMN+D,EAAe,UAA5B+G,EANmB,sBAOF/G,EAAe,SAPb,mBAOrBJ,EAPqB,KAOdoH,EAPc,OAQNhH,EAAe,UAA5B0G,EARmB,oBAmC5B,OAxBAC,qBAAU,WACR,IACMtI,IAAU8D,EAAW/C,QACvB+C,EAAW8E,UAAU3I,GAEvB,MAAO4I,GACPF,EAASjG,EAAaC,MAAMpB,EAAO,0CACnCkH,EAAU,MACVC,EAAU,WAEX,CAAC1I,EAAOC,EAAUwI,EAAWC,EAAWC,EAAUpH,IAGrD+G,qBAAU,WACHxE,EAAWjG,IACdiG,EAAWgF,MAAM7I,GhB0BS,SAACrC,GAC/B,OAAOA,EAAOmL,OAAM,SAACC,GAAD,OAAOA,KgBxBrBC,CAAiBrL,KACnB8K,EAAU,oBACVL,EAAU,CAAE7G,WAAW,EAAM+G,SAAU,OAAQ9G,QAASqC,EAAWpC,YAEpE,CAACN,EAAMsH,EAAWzI,EAAUrC,EAAQyK,IAGrC,yBAAK3E,UAAU,kCACb,kBAACyE,GAAA,EAAD,CAAkBrD,MAAO,CAAE1B,MAAO4B,IAAM,QACxC,yBAAKtB,UAAU,8BAAf,OAAiDzD,GACjD,yBAAKyD,UAAU,8BAAf,2CCgCSwF,GArEF,WAAM,MAESvH,EAAe,SAFxB,mBAEV3B,EAFU,KAEHmJ,EAFG,OAGOxH,EAAe,QAHtB,mBAGVP,EAHU,KAGJgI,EAHI,OAIWzH,EAAe,UAJ1B,mBAIV9F,EAJU,KAIF4M,EAJE,OAKQ9G,EAAe,aAA/B0H,EALQ,sBAMW1H,EAAe,UAN1B,mBAMVL,EANU,KAMFoH,EANE,OAOS/G,EAAe,SAPxB,mBAOVJ,EAPU,KAOHoH,EAPG,OAQKhH,EAAe,UAA5B2H,EARQ,oBA4DjB,OAjDAhB,qBAAU,WACY,OAAhBlH,EAAKvF,QAAmBA,IAC1BwN,GAAa,GAEbE,EAAIC,IAAJ,qBAAsB3N,IAAU4N,KAAK,SAAS,SAACC,GAC7C,GAAIA,EAAKC,MAAO,CACd,IAAMC,EAAoBL,EAAIC,MAAMK,MAAM,cAAcA,MAAMhO,GAC9DiI,EAAW2E,UAAU5M,GACrBiI,EAAWqF,SAASS,GACpBR,EAAQtF,EAAWhF,OAAO4K,EAAKC,QAC/BR,EAASS,QAETnB,EAAU,MACV3E,EAAW2E,UAAU,MACrBE,EAASjG,EAAaC,MAAMpB,EAAO,iCACnCmH,EAAU,QAGZU,EAAQtF,EAAW3F,OACnBkL,GAAa,SAGhB,CAACjI,EAAKvF,OAAQA,EAAQsN,EAAUC,EAASX,EAAWY,EAAcX,EAAWC,EAAUpH,IAE1F+G,qBAAU,WACR,GAAItI,EAAO,CAUTA,EAAM8J,GAAG,SATe,SAACJ,GACvBL,GAAa,GACTK,EAAKC,QACPP,EAAQtF,EAAWhF,OAAO4K,EAAKC,QAC/BL,EAAUxF,EAAWiG,iBAEvBV,GAAa,MAKf,IAAMW,EAAuB,SAACN,GAC5BL,GAAa,GACbV,EAASjG,EAAaG,KAAKtB,EAAO,wBAClCmH,EAAU,SAGZ,OAAO,WACL1I,EAAMiK,IAAI,QAASD,OAGtB,CAAChK,EAAOoJ,EAASC,EAAcX,EAAWC,EAAUpH,EAAO+H,IAG5D,yBAAK5F,UAAU,QACb,kBAAC,EAAD,CAAY7H,OAAQA,IACR,iBAAXyF,GAA6B,kBAAC,GAAD,MAC7BA,EAAOsF,WAAW,eAAiB,kBAAC,GAAD,QCc3B,O,WAxFb,aAAe,oBACblJ,KAAKwM,MAAQ,CACXjK,SAAU,GACVpE,OAAQ,IAEV6B,KAAKyM,UAAW,EAEhBzM,KAAK0M,O,mDAKL,OADA1M,KAAK2M,OACE3M,KAAK4M,Q,0BAGV/K,GAKF,OAJK7B,KAAKyM,UACRzM,KAAK2M,OAGH9K,EACK7B,KAAKwM,MAAM3K,IAAQ,KAGrB7B,KAAKwM,Q,6BAIZ,IAAMK,EAAeC,KAAKC,MAAMC,OAAOH,aAAaI,QAAQ,eAExDJ,IACF7M,KAAKwM,MAAQK,EACb7M,KAAKyM,UAAW,K,0BAIhBlD,GACGvJ,KAAKyM,UACRzM,KAAK2M,OAGP,IAAM3E,SAAcuB,EACP,WAATvB,GAA8B,WAATA,GAMJ,kBAAVuB,EACTvJ,KAAKwM,MAAMjD,IAAUvJ,KAAKwM,MAAMjD,IAGhC9H,OAAOC,QAAQ6H,GAAO2D,SAAQ,YAAkB,IAAD,mBAAfrL,EAAe,KAAVO,EAAU,KAChC,OAATA,QAA0B+K,IAAT/K,UACZmH,EAAM1H,MAIjB7B,KAAKwM,MAAL,eACKxM,KAAKwM,MADV,GAEKjD,IAIPvJ,KAAKc,QArBHH,QAAQsE,MAAM,mE,6BAyBZjF,KAAKoN,WACPpN,KAAK2M,OAGPK,OAAOH,aAAaQ,QAAQ,aAAcP,KAAKQ,UAAUtN,KAAKwM,QAC9DxM,KAAK2M,S,oCAIL,MAAO,CAAC3M,KAAKwM,MAAMrO,OAAQ6B,KAAKwM,MAAMjK,Y,kCAG5BpE,EAAQoE,GAClBvC,KAAKN,IAAI,CACPvB,SACAoE,iB,MCxESgL,GATI,SAAC,GAAe,EAAbpP,OACpB,OACE,kBAACoI,EAAA,EAAD,CAAQP,UAAU,SAASQ,SAAS,UAClC,yBAAKR,UAAU,mBAAf,cACA,4CC+HSwH,GA5HE,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAAmB,EAEpC1J,EAAe,UAFqB,mBAEzD9F,EAFyD,KAEjD4M,EAFiD,OAG9B9G,EAAe,aAHe,mBAGzDR,EAHyD,KAG9CkI,EAH8C,OAIhC1H,EAAe,YAJiB,mBAIzD1B,EAJyD,KAI/CqL,EAJ+C,OAK1C3J,EAAe,UAA5B+G,EALuD,sBAOtB5B,oBAAS,GAPa,mBAOzDyE,EAPyD,KAO1CC,EAP0C,OAQlB1E,oBAAS,GARS,mBAQzD2E,EARyD,KAQxCC,EARwC,OAS1B5E,mBAAS,IATiB,mBASzD6E,EATyD,KAS5CC,EAT4C,KAYhEtD,qBAAU,WACJ+C,GACFC,EAAYD,MAKhB/C,qBAAU,WAEJzM,IAAWsP,GAAqC,KAAb,OAAVA,QAAU,IAAVA,OAAA,EAAAA,EAAYtL,UACvCwJ,GAAa,GAEbE,EAAIC,IAAJ,qBAAsB2B,EAAWU,gBAAiBpC,KAAK,SAAS,SAACC,GAC3DA,EAAKC,OACPlB,EAAU0C,EAAWU,eACrBL,GAAiB,GACjBI,EAAe,MAEfA,EAAe,+CACfJ,GAAiB,IAEnBnC,GAAa,QAIH,OAAV8B,QAAU,IAAVA,OAAA,EAAAA,EAAYtL,QAAS,GACvB2L,GAAiB,GAGfL,IAAetP,IACjB2P,GAAiB,GACjBI,EAAe,MAIL,OAAR3L,QAAQ,IAARA,OAAA,EAAAA,EAAUJ,SAAU,IAAiB,OAAZwL,QAAY,IAAZA,OAAA,EAAAA,EAAcxL,SAAU,EACnD6L,GAAmB,GAEnBA,GAAmB,KAEpB,CACD7P,EACAsP,EACA1C,EACA+C,EACAnC,EACApJ,EACAyL,EACAL,IAYF,OACE,yBAAK3H,UAAU,0BACb,kBAAC4D,GAAA,EAAD,CACE5D,UAAU,iBACVoI,UAAQ,EACRvE,GAAG,UACHC,MAAM,UACNuE,aAAcZ,EACdxD,SAAU,SAACC,GAAD,OAAOwD,EAAcxD,EAAEC,OAAOZ,QACxC+E,WAAYL,EACZlE,WAAY,CAAEwE,UAAW,OAE3B,kBAAC3E,GAAA,EAAD,CACE5D,UAAU,iBACVoI,UAAQ,EACRvE,GAAG,WACHC,MAAM,WACNuE,aAAcV,EACd1D,SAAU,SAACC,GAAD,OAAO0D,EAAY1D,EAAEC,OAAOZ,QACtCQ,WAAY,CAAEwE,UAAW,KACzBD,WACE/L,IAAawL,EAAkB,+CAAiD,KAIpF,6BAAMtK,GAAa,kBAAC+K,EAAA,EAAD,CAAgBpH,MAAO,CAAEsC,WAAYpC,IAAM,SAE9D,kBAACmC,GAAA,EAAD,CACEzD,UAAU,YACVD,QAAQ,YACRL,MAAM,UACN6E,UAAWwD,IAAoBF,EAC/BlH,QAAS,kBAxCb8H,GAAoBC,YAAYvQ,EAAQoE,QACxCyI,EAAU,iBAwCN5D,MAAO,CAAEsC,WAAYpC,IAAM,OAN7B,QAQQnJ,GAER,yBAAK6H,UAAU,uCAAf,UACA,yBAAKA,UAAU,4BACb,kBAACyD,GAAA,EAAD,CACEzD,UAAU,QACVD,QAAQ,YACRL,MAAM,UACNiB,QAAS,WA9CfqE,EAAU,iBA0CN,oB,2DC7BO2D,GA7EI,SAAC,GAAuB,IAArBjB,EAAoB,EAApBA,cAAoB,EAENzJ,EAAe,aAFT,mBAEjCR,EAFiC,KAEtBkI,EAFsB,OAGlB1H,EAAe,UAA5B+G,EAH+B,sBAId/G,EAAe,SAJD,mBAIjCJ,EAJiC,KAI1BoH,EAJ0B,OAMR7B,mBAAS,WAND,mBAMjCwF,EANiC,KAMvBC,EANuB,OAOIzF,mBAAS,UAPb,mBAOjC0F,EAPiC,KAOjBC,EAPiB,KASlCC,EAAa,WACjBrD,GAAa,GACb,IAAM9B,ErBIgB,WAKxB,IAJA,IAAMoF,EAAU,6BAEZpF,EAAK,GAEFA,EAAG1H,OAAS,GACjB0H,GAAMoF,EAAQnR,KAAKyB,MAAMzB,KAAKC,SAAWkR,EAAQ9M,SAGnD,OAAO0H,EqBbMqF,GACLzO,EAAQkD,EAAW+I,KAAK7C,EAAI+E,EAAUE,GAE5C,IACEjD,EAAIC,IAAI,eAAe1K,OAAvB,gBACGyI,EADH,eAEOpJ,KAGPiN,EAAc7D,GACdoB,EAASjG,EAAaI,QAAQvB,EAArB,yCAA8DgG,KACvE8B,GAAa,GACbX,EAAU,QACV,SACAC,EAASjG,EAAaC,MAAMpB,EAAO,6BAXrC,QAaE8H,GAAa,KAIjB,OACE,yBAAK3F,UAAU,4BACb,kBAACmJ,GAAA,EAAD,CAAaC,UAAU,YACrB,kBAACC,GAAA,EAAD,CAAWD,UAAU,SAASpJ,UAAU,qBAAxC,aAGA,kBAACsJ,GAAA,EAAD,CAAY9J,KAAK,YAAY+D,MAAOqF,EAAU3E,SAAU,SAACC,GAAD,OAAO2E,EAAY3E,EAAEC,OAAOZ,SAClF,kBAACgG,GAAA,EAAD,CAAkBhG,MAAM,UAAUiG,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,YAC5D,kBAACyF,GAAA,EAAD,CAAkBhG,MAAM,SAASgB,UAAQ,EAACiF,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,WACpE,kBAACyF,GAAA,EAAD,CAAkBhG,MAAM,WAAWgB,UAAQ,EAACiF,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,aACtE,kBAACyF,GAAA,EAAD,CAAkBhG,MAAM,QAAQgB,UAAQ,EAACiF,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,UACnE,kBAACyF,GAAA,EAAD,CAAkBhG,MAAM,YAAYgB,UAAQ,EAACiF,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,eAEzE,kBAACuF,GAAA,EAAD,CAAWD,UAAU,SAASpJ,UAAU,qBAAxC,cAGA,kBAACsJ,GAAA,EAAD,CACE9J,KAAK,kBACL+D,MAAOuF,EACP7E,SAAU,SAACC,GAAD,OAAO6E,EAAkB7E,EAAEC,OAAOZ,SAE5C,kBAACgG,GAAA,EAAD,CAAkBhG,MAAM,OAAOiG,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,SACzD,kBAACyF,GAAA,EAAD,CAAkBhG,MAAM,SAASiG,QAAS,kBAACC,GAAA,EAAD,MAAW3F,MAAM,aAG/D,kBAACL,GAAA,EAAD,CACEzD,UAAU,YACVD,QAAQ,YACRL,MAAM,UACN0B,MAAO,CAAEsC,WAAYpC,IAAM,MAC3BX,QAAS,kBAAMqI,KACfzE,SAAU9G,GANZ,UAQUmL,EARV,SAUA,kBAACnF,GAAA,EAAD,CACEzD,UAAU,oCACVN,MAAM,UACNiB,QAAS,kBAAMqE,EAAU,UAH3B,UC5CS0E,GA5BF,WAAM,MAEcjB,GAAoBkB,cAFlC,mBAEVC,EAFU,KAEAC,EAFA,OAIA5L,EAAe,UAAzBL,EAJU,sBAMmBwF,mBAASwG,GAN5B,mBAMVnC,EANU,KAMEC,EANF,OAOMtE,mBAASyG,GAAzBlC,EAPU,oBASjB,OACE,yBAAK3H,UAAU,QACb,kBAAC,GAAD,MACA,yBAAKA,UAAU,gBACD,SAAXpC,GACC,kBAAC,GAAD,CACE6J,WAAYA,EACZC,cAAeA,EACfC,aAAcA,IAGN,gBAAX/J,GACC,kBAAC,GAAD,CAAY6J,WAAYA,EAAYC,cAAeA,O,oBxBpBvDoC,GAAaC,sBAAW,SAAoBC,EAAOlE,GACvD,OAAO,kBAACmE,GAAA,EAAD,eAAMC,UAAU,KAAKpE,IAAKA,GAASkE,OAkE7BG,GA/DD,WAAO,IAAD,IAEUlM,EAAe,UAFzB,mBAEXD,EAFW,KAEH2G,EAFG,KAIZyF,EAAc,WAClBzF,EAAU,CACR7G,WAAW,IAEbuM,aAAaxV,IAGf+P,qBAAU,WACR,GAAI5G,EAAOF,aAAeE,EAAO6G,UAAgC,UAApB7G,EAAO6G,UAAuB,CACzE,IAAMyF,EAA4B,SAApBtM,EAAO6G,SAAsB,KAAQ,IAEnDhQ,EAAkB0V,YAAW,WAC3B5F,EAAU,CACR7G,WAAW,MAEZwM,MAEJ,CAACtM,EAAQ2G,IAEZ,IAAMlD,GAAc,OAANzD,QAAM,IAANA,GAAA,UAAAA,EAAQD,eAAR,eAAiB6C,MAAM,UAAW,GAEhD,OACE,kBAAC4J,GAAA,EAAD,CACEC,KAAMzM,EAAOF,UACb4M,oBAAqBZ,GACrBa,aAAW,EACXC,QAASR,EACTS,kBAAgB,2BAChBC,mBAAiB,kCAEjB,yBAAK9K,UAAU,mBACZyB,EAAMvI,KAAI,SAACwI,GAAD,OACT,uBAAG7F,IAAK6F,GAAOA,OAGK,SAApB1D,EAAO6G,UAA2C,UAApB7G,EAAO6G,WACrC,kBAACpB,GAAA,EAAD,CACE1D,QAAQ,YACRL,MAAM,UACN0B,MAAO,CAAEsC,WAAYpC,IAAM,MAC3BX,QAAS,kBAAMyJ,MAJjB,OAUiB,UAApBpM,EAAO6G,UACN,yBAAK7E,UAAU,kBACb,0BACEA,UAAS,mDACa,SAApBhC,EAAO6G,SAAsB,OAAS,c,oByBlCrCkG,GA5BD,WAAM,MAEQ9M,EAAe,SAFvB,mBAEXJ,EAFW,KAEJoH,EAFI,KAIZmF,EAAc,WAClBnF,EAAS,eACJpH,EADG,CAENC,WAAW,MAIf,OACE,kBAACkN,GAAA,EAAD,CACEpL,aAAc,CACZC,SAAU,SACVC,WAAY,QAEd2K,KAAM5M,EAAMC,UACZmN,iBAAkB,IAClBL,QAASR,GAET,kBAACc,GAAA,EAAD,CAAON,QAASR,EAAalL,SAAUrB,EAAMqB,UAC1CrB,EAAME,WCWAoN,GA3BH,WAAM,MAEIlN,EAAe,aAA5BR,EAFS,sBAGCQ,EAAe,UAAzBL,EAHS,oBAKhB,OACE,kBAAC,WAAD,KACE,kBAACwN,EAAA,EAAD,CAAWC,SAAS,KAAKrL,UAAU,eAChCvC,EAAY,kBAAC+K,EAAA,EAAD,MAAqB,yBAAKxI,UAAU,6BAChDpC,EAAOsF,WAAW,SAAW,kBAAC,GAAD,MAC7BtF,EAAOsF,WAAW,SAAW,kBAAC,GAAD,OAEhC,kBAAC,GAAD,MACA,kBAAC,GAAD,OACC3E,ICda+M,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MACvB,2DCONC,IAASC,OACP,kBAAC,aAAD,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnN,GACLtE,QAAQsE,MAAMA,EAAMlB,a,mBEzI5BsO,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,4C","file":"static/js/main.c8be6644.chunk.js","sourcesContent":["import React, { forwardRef, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Zoom from '@material-ui/core/Zoom';\nimport { green } from '@material-ui/core/colors';\n\nimport useGlobalState from '../useGlobalState';\n\nlet closePopUpTimer;\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Zoom direction=\"up\" ref={ref} {...props} />;\n});\n\nconst PopUp = () => {\n  // Global States\n  const [dialog, setDialog] = useGlobalState('dialog');\n\n  const handleClose = () => {\n    setDialog({\n      isVisible: false,\n    });\n    clearTimeout(closePopUpTimer);\n  };\n\n  useEffect(() => {\n    if (dialog.isVisible && (!dialog.duration || dialog.duration !== 'fixed')) {\n      const timer = dialog.duration === 'long' ? 12000 : 5000;\n\n      closePopUpTimer = setTimeout(() => {\n        setDialog({\n          isVisible: false,\n        });\n      }, timer);\n    }\n  }, [dialog, setDialog]);\n\n  const texts = dialog?.message?.split('<br>') || [];\n\n  return (\n    <Dialog\n      open={dialog.isVisible}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <div className=\"popup-container\">\n        {texts.map((text) => (\n          <p key={text}>{text}</p>\n        ))}\n\n        {(dialog.duration === 'long' || dialog.duration === 'fixed') && (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ background: green[300] }}\n            onClick={() => handleClose()}\n          >\n            OK\n          </Button>\n        )}\n      </div>\n      {dialog.duration !== 'fixed' && (\n        <div className=\"popup-timeleft\">\n          <span\n            className={`popup-timeleft__bar popup-timeleft__bar--${\n              dialog.duration === 'long' ? 'long' : 'short'\n            }`}\n          ></span>\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default PopUp;\n","const SHORT_GAME_KEYS = {\n  GG: 2,\n  AA: 1,\n  AG: 1,\n  AB: 1,\n  GA: 1,\n  BA: 1,\n  BB: 3,\n  GB: 3,\n  BG: 3,\n};\n\nconst MEDIUM_GAME_KEYS = {\n  GG: 3,\n  AA: 1,\n  AG: 1,\n  AB: 1,\n  GA: 1,\n  BA: 1,\n  BB: 4,\n  GB: 4,\n  BG: 4,\n};\n\nconst LONG_GAME_KEYS = {\n  GG: 3,\n  AA: 1,\n  AG: 1,\n  AB: 1,\n  GA: 1,\n  BA: 1,\n  BB: 7,\n  GB: 5,\n  BG: 5,\n};\n\nexport const GAME_LENGHTS = {\n  classic: 25,\n  simple: 16,\n  pictures: 20,\n  dixit: 16,\n  deception: 20,\n};\n\nexport const LINE_LENGTHS = {\n  classic: 5,\n  simple: 4,\n  pictures: 5,\n  dixit: 4,\n  deception: 5,\n};\n\nexport const KEY_MAPPING = {\n  classic: LONG_GAME_KEYS,\n  simple: SHORT_GAME_KEYS,\n  pictures: MEDIUM_GAME_KEYS,\n  dixit: SHORT_GAME_KEYS,\n};\n\nexport const MILITARY_ALPHABET = {\n  A: 'alpha',\n  B: 'bravo',\n  C: 'charlie',\n  D: 'delta',\n  E: 'echo',\n  F: 'foxtrot',\n  G: 'golf',\n  H: 'hotel',\n  I: 'india',\n  J: 'juliet',\n  K: 'kilo',\n  L: 'lima',\n  M: 'mike',\n  N: 'november',\n  O: 'oscar',\n  P: 'papa',\n  Q: 'quebek',\n  R: 'romeo',\n  S: 'sierra',\n  T: 'tango',\n  U: 'uniform',\n  V: 'victor',\n  W: 'whiskey',\n  X: 'x-ray',\n  Y: 'yankee',\n  Z: 'zulu',\n};\n","import { MILITARY_ALPHABET } from './constants';\n\nexport const shuffle = (list) => {\n  const res = [...list];\n  res.sort(() => Math.random() - 0.5);\n  return res;\n};\n\nexport const getRandomItems = (list, quantity) => {\n  const shuffledList = shuffle(list);\n  const res = new Array(quantity).fill(null);\n  for (let i = 0; i < res.length; i++) {\n    const item = shuffledList[i];\n    res[i] = item;\n  }\n  return res;\n};\n\nexport const reverseLines = (list, lineSize = 5) => {\n  const arr = [];\n  for (let i = 0; i < list.length; i += lineSize) {\n    arr.push(list.slice(i, i + lineSize));\n  }\n\n  return arr.reduce((acc, eachArr) => {\n    const newArr = eachArr.reverse();\n    return [...acc, ...newArr];\n  }, []);\n};\n\nexport const generadeID = () => {\n  const LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  let id = '';\n\n  while (id.length < 4) {\n    id += LETTERS[Math.floor(Math.random() * LETTERS.length)];\n  }\n\n  return id;\n};\n\nexport const getMilitaryTranslation = (gameID = '') => {\n  return gameID\n    .split('')\n    .map((letter) => MILITARY_ALPHABET[letter])\n    .join(' • ');\n};\n\nexport const getKeyClass = (index, side, keys) => {\n  const key = keys[index][side];\n  switch (key) {\n    case 'A':\n      return 'assassin';\n    case 'G':\n      return 'agent';\n    default:\n      return 'bystander';\n  }\n};\n\nexport const isEveryoneOnline = (online) => {\n  return online.every((s) => s);\n};\n","const codenames = [\n  'america',\n  'book',\n  'coffee',\n  'disco',\n  'emerald',\n  'fork',\n  'gorilla',\n  'helicopter',\n  'island',\n  'job',\n  'key',\n  'lemon',\n  'mountain',\n  'november',\n  'olive',\n  'parrot',\n  'queen',\n  'rat',\n  'sex',\n  'tamborine',\n  'uber',\n  'vase',\n  'water',\n  'yellow',\n  'zombie',\n];\n\nconst keyCard = [\n  'AG',\n  'BB',\n  'BG',\n  'GB',\n  'BB',\n  'BB',\n  'BB',\n  'GB',\n  'GB',\n  'AA',\n  'BG',\n  'BG',\n  'BB',\n  'GA',\n  'AB',\n  'GB',\n  'BB',\n  'BG',\n  'GG',\n  'GB',\n  'BA',\n  'BB',\n  'GG',\n  'BG',\n  'GG',\n];\n\nconst basics = {\n  codenames,\n  difficulty: 'normal',\n  gameID: 'ABCD',\n  keyCard,\n  mode: 'classic',\n  players: ['Kavis', 'Dennis'],\n  turnOrder: ['Kavis', 'Dennis'],\n  timestamps: [0, 0],\n  turn: 0,\n  phase: 'setup',\n  mock: true,\n  messages: [],\n};\n\nconst mockMessages = (num) => {\n  const clues = [\n    'pandemic',\n    'bagel',\n    'store',\n    'purchase',\n    'nine',\n    'investigator',\n    'body',\n    'morning',\n    'mother',\n    'daisy',\n    'son',\n    'love',\n    'date',\n    'drink',\n    'drugs',\n    'fabric',\n    'rigid',\n    'see',\n    'detail',\n    'information',\n    'palm',\n    'print',\n    'alaska',\n    'headphones',\n    'table',\n    'tomato',\n    'clue',\n    'amazing',\n  ];\n\n  return new Array(num).fill(' ').map((entry, index) => {\n    return {\n      clue: clues[index],\n      number: Math.floor(Math.random() * 4),\n      user: basics.turnOrder[index % 2],\n    };\n  });\n};\n\nconst mockTurns = (set) => {\n  const now = Date.now();\n\n  switch (set) {\n    case 'setup':\n      return {\n        ...basics,\n        timestamps: [now, now],\n        turn: 0,\n        phase: 'setup',\n      };\n    case 'turn1.clue-giving':\n      return {\n        ...basics,\n        timestamps: [now, now],\n        turn: 1,\n        phase: 'clue-giving',\n      };\n    case 'turn1.guessing':\n      return {\n        ...basics,\n        timestamps: [now, now],\n        turn: 1,\n        phase: 'guessing',\n        messages: mockMessages(1),\n      };\n    case 'turn2.clue-giving':\n      return {\n        ...basics,\n        timestamps: [now, now],\n        turn: 2,\n        phase: 'clue-giving',\n        messages: mockMessages(20),\n      };\n    case 'turn2.guessing':\n      return {\n        ...basics,\n        timestamps: [now, now],\n        turn: 2,\n        phase: 'guessing',\n        messages: mockMessages(2),\n      };\n    default:\n      return {\n        ...basics,\n        timestamps: [now, now],\n      };\n  }\n};\n\nexport default mockTurns;\n","import { GAME_LENGHTS, KEY_MAPPING } from './constants';\nimport { getRandomItems, shuffle } from './utils';\nimport mockTurns from './api/mock-turns';\n\nconst WORDS = require('./words');\n\nconst ONE_MINUTE = 60000;\n\nconst dialogs = {\n  setup:\n    'Analyse the codenames.<br>Your goal is to help your ally to find as many agents (cards) on their side.<br>When you think you have a good clue in mind, press \"I want to start\"!',\n  giveClue:\n    \"Come up with a one-word clue and the number of cards that match your clue.<br>Watch out for matching Assassins (black-bordered cards), if your ally selects one of them, it's game over.\",\n  waitClue:\n    'Waiting for your ally to come up with a clue that matches as many codenames as possible.<br>Stay in position!',\n  makeGuess:\n    \"Check the message board for your clue. The number is how many codenames match the clue.<br>Don't fail me agent! Click on the cards you think are a match. You need to make at least one guess to be able to pass.\",\n  waitGuess:\n    'Your ally is trying to make contact with the spies.<br>Was your clue clear enough? Wait and see',\n  wrongGuess: 'Your ally selected the WRONG agent!',\n  myWrongGuess: 'You selected the WRONG agent!',\n};\n\nclass GameEngine {\n  constructor() {\n    this._dbRef = null;\n\n    this.gameID = null;\n    this.mode = null;\n    this.difficulty = null;\n    this.players = [];\n    this.online = [false, false];\n    this.timestamps = [0, 0];\n    this.me = null;\n    this.turn = 0;\n    this.turnOrder = [];\n    this.phase = 'setup';\n    this.messages = [];\n    this.codenames = [];\n    this.guesses = {};\n\n    this._tempSaveObj = null;\n    this._interval = null;\n  }\n\n  // GETTERS\n\n  /**\n   * Determines the index of the player in the players array\n   * @type  {string}\n   */\n  get myDatabaseIndex() {\n    return this.players.findIndex((p) => p === this.me);\n  }\n\n  /**\n   * Determines the index of the ally in the players array\n   * @type  {string}\n   */\n  get allyDatabaseIndex() {\n    return this.turnOrder.findIndex((p) => p !== this.me);\n  }\n\n  /**\n   * Determines the index of the player in the turn order array\n   * @type  {string}\n   */\n  get myTurnIndex() {\n    return this.turnOrder.findIndex((p) => p === this.me);\n  }\n\n  /**\n   * Determines the index of the player in the turn order array\n   * @type  {string}\n   */\n  get myAllyIndex() {\n    return this.turnOrder.findIndex((p) => p !== this.me);\n  }\n\n  /**\n   * Returns the name of the other player or OP\n   * @type  {string}\n   */\n  get allysName() {\n    return this.players[this.allyDatabaseIndex] || 'OP';\n  }\n\n  /**\n   * Flag indicating if game has already two players set\n   * @type  {boolean}\n   */\n  get isGameFull() {\n    return !this.amISet && this.players.length === 2;\n  }\n\n  /**\n   * Flag indicating if me property is set and included in players\n   * @type  {boolean}\n   */\n  get amISet() {\n    return this.me && this.players.includes(this.me);\n  }\n\n  /**\n   * Determines if player has an active or passive action depending on the turn\n   * @type  {string} passive or active\n   */\n  get turnRole() {\n    return this.turn % 2 === this.myTurnIndex ? 'passive' : 'active';\n  }\n\n  /**\n   * Determines the current dialog according to phase and turn role\n   * @type  {string}\n   */\n  get dialog() {\n    switch (this.phase) {\n      case 'setup':\n        return dialogs.setup;\n      case 'clue-giving':\n        return this.turnRole === 'active' ? dialogs.giveClue : dialogs.waitClue;\n      case 'guessing':\n        return this.turnRole === 'active' ? dialogs.makeGuess : dialogs.waitGuess;\n      case 'wrong-guess':\n        return this.turnRole === 'active' ? dialogs.wrongGuess : dialogs.myWrongGuess;\n      default:\n        return '';\n    }\n  }\n\n  /**\n   * State to be used by the game global state\n   * @type  {string}\n   */\n  get state() {\n    return {\n      gameID: this.gameID,\n      mode: this.mode,\n      difficulty: this.difficulty,\n      players: this.players,\n      timestamps: this.timestamps,\n      turn: this.turn,\n      phase: this.phase,\n      messages: this.messages || [],\n      turnOrder: this.turnOrder,\n      codenames: this.codenames,\n      keyCard: this.keyCard,\n    };\n  }\n\n  // METHORDS\n\n  /**\n   * Sets basic info and calls setup function to prepare game\n   * @param  {string} gameID a 4-letter unique ID\n   * @param  {string} mode (classic, simple, pictures, dixit, deception)\n   * @param  {string} difficulty (easy, normal)\n   * @returns {object} the current state\n   */\n  init(gameID, mode, difficulty) {\n    this.reset();\n\n    this.gameID = gameID;\n    this.mode = mode;\n    this.difficulty = difficulty;\n\n    this.setup();\n\n    return this.state;\n  }\n\n  updateOnline() {\n    this.online = this.timestamps.map((entry) => Date.now() - entry < ONE_MINUTE * 10);\n    return this.online;\n  }\n\n  delaySave() {\n    if (!this._interval) {\n      this._interval = setInterval(() => {\n        if (this._dbRef) {\n          this.save({ ...this._tempSaveObj });\n          this._tempSaveObj = null;\n          clearInterval(this._interval);\n        }\n      }, 1000);\n    } else {\n      console.warn('There`s already a save interval running');\n    }\n  }\n\n  save(dataObj = {}) {\n    if (!this._dbRef) {\n      this._tempSaveObj = dataObj;\n      return this.delaySave();\n    }\n\n    console.log('%cSaving...', 'background:LightSalmon', dataObj);\n\n    // New timestamp\n    this.timestamps[this.myDatabaseIndex] = Date.now();\n\n    this._dbRef.update({\n      ...dataObj,\n      timestamps: dataObj.mock ? dataObj.timestamps : this.timestamps,\n    });\n  }\n\n  update(data) {\n    console.log('%cUpdating game...', 'background:GreenYellow', data);\n    this.gameID = data.gameID;\n    this.mode = data.mode;\n    this.difficulty = data.difficulty;\n    this.players = data.players || [];\n    this.timestamps = data.timestamps || [0, 0];\n    this.turn = data.turn;\n    this.phase = data.phase;\n    this.turnOrder = data.turnOrder || [];\n\n    this.messages = data.messages || [];\n\n    this.codenames = data.codenames;\n    this.keyCard = data.keyCard;\n\n    return this.state;\n  }\n\n  reset() {\n    // TO-DO reset all properties\n  }\n\n  setup() {\n    const gridLength = GAME_LENGHTS[this.mode];\n    const keyMap = KEY_MAPPING[this.mode];\n\n    // Build key card\n    const keyArray = Object.entries(keyMap).reduce((acc, [key, count]) => {\n      const newArr = new Array(count).fill(key);\n      return [...acc, ...newArr];\n    }, []);\n\n    // Set KeyCards\n    this.keyCard = shuffle(keyArray);\n\n    // Set words\n    this.codenames = getRandomItems(WORDS, gridLength);\n  }\n\n  // SETTERS\n\n  setDbRef(dbRef) {\n    if (!this._dbRef) {\n      this._dbRef = dbRef;\n    }\n  }\n\n  setGameID(gameID) {\n    this.gameID = gameID;\n  }\n\n  // SAVERS\n\n  setPlayer(nickname) {\n    this.me = nickname;\n\n    if (this.isGameFull) {\n      throw Error('Game is full, try a different game ID');\n    }\n\n    if (!this.players.includes(nickname)) {\n      this.players.push(nickname);\n      this.save({ players: this.players });\n    } else {\n      this.save();\n    }\n  }\n\n  setMe(nickname) {\n    if (!this.me) this.me = nickname;\n\n    this.save();\n  }\n\n  setTurnOrder() {\n    const turnOrder = this.myDatabaseIndex === 0 ? [...this.players] : [...this.players].reverse();\n    this.save({\n      turnOrder,\n      turn: this.turn + 1,\n      phase: 'clue-giving',\n    });\n  }\n\n  submitClue(clueObj) {\n    this.save({\n      phase: 'guessing',\n      messages: [\n        ...this.messages,\n        {\n          clue: clueObj.clue,\n          number: clueObj.number || 0,\n          player: this.me,\n        },\n      ],\n    });\n  }\n\n  submitGuess(guessIndex) {\n    // Check if guess is result\n    const guessResult = this.keyCard[guessIndex][this.allyDatabaseIndex];\n    console.log('key', this.keyCard[guessIndex]);\n    console.log('myGuess', guessResult);\n    //\n    switch (guessResult) {\n      case 'A':\n        console.log('CASE A');\n        // this.save({\n        //   turn: 0,\n        //   phase: 'gameover',\n        //   // TO-DO: determine what side made the mistake\n        // });\n        break;\n      case 'G':\n        console.log('CASE G');\n        // Save guess\n        break;\n      case 'B':\n        console.log('CASE B');\n        // Save guess\n        // Force pass\n        break;\n      default:\n        console.log('CASE ?');\n      // do nothing\n    }\n  }\n\n  pass() {}\n\n  mock(turnNumber) {\n    this.save(mockTurns(turnNumber));\n  }\n}\n\nexport default new GameEngine();\n","import { createGlobalState } from 'react-hooks-global-state';\n\nimport GameEngine from './engine';\n\nconst initialState = {\n  gameID: null,\n  nickname: null,\n  isLoading: false,\n  game: GameEngine.state,\n  dbRef: null,\n  screen: 'home',\n  toast: {\n    isVisible: false,\n    message: '',\n  },\n  dialog: {\n    isVisible: false,\n    message: '',\n  },\n  online: [false, false],\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import fb from './firebase';\n\nexport default fb.database();\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst fb = firebase.initializeApp(config);\n\nexport default fb;\n","const toastService = {\n  error(toast, message) {\n    return { ...toast, isVisible: true, severity: 'error', message };\n  },\n  info(toast, message) {\n    return { ...toast, isVisible: true, severity: 'info', message };\n  },\n  success(toast, message) {\n    return { ...toast, isVisible: true, severity: 'success', message };\n  },\n  warning(toast, message) {\n    return { ...toast, isVisible: true, severity: 'warning', message };\n  },\n};\n\nexport default toastService;\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Badge from '@material-ui/core/Badge';\n\nconst OnlineBadge = ({ isOnline, name }) => {\n  return (\n    <Badge\n      color=\"secondary\"\n      overlap=\"circle\"\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      variant=\"dot\"\n      className={`badge ${isOnline ? 'badge--online' : 'badge--offline'}`}\n    >\n      <Avatar>{name}</Avatar>\n    </Badge>\n  );\n};\n\nexport default OnlineBadge;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Cached from '@material-ui/icons/Cached';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { getMilitaryTranslation } from '../utils';\n\nimport OnlineBadge from './OnlineBadge';\n\nconst GameHeader = ({ gameID }) => {\n  const [online] = useGlobalState('online');\n\n  const allyShortNickname = gameEngine.allysName.substring(0, 2);\n\n  return (\n    <AppBar className=\"header header--flex\" position=\"static\">\n      <div className=\"header__left-area\">\n        <IconButton aria-label=\"reload\" onClick={() => gameEngine.save()}>\n          <Cached />\n        </IconButton>\n      </div>\n      <div className=\"header__game-center\">\n        <div className=\"header__game-id\">game id</div>\n        <h1>{gameID}</h1>\n        <div className=\"header__military-translation\">{getMilitaryTranslation(gameID)}</div>\n      </div>\n      <div className=\"header__right-area\">\n        <OnlineBadge name={allyShortNickname} isOnline={online[gameEngine.allyDatabaseIndex]} />\n        <OnlineBadge name=\"Me\" isOnline={online[gameEngine.myDatabaseIndex]} />\n      </div>\n    </AppBar>\n  );\n};\n\nexport default GameHeader;\n","import React from 'react';\nimport FolderSpecial from '@material-ui/icons/FolderSpecial';\nimport { green, yellow } from '@material-ui/core/colors';\n\nimport useGlobalState from '../useGlobalState';\n\nconst rounds = new Array(11).fill(null).map((c, i) => i + 1);\n\nconst GameTimeline = () => {\n  // Global States\n  const [game] = useGlobalState('game');\n\n  return (\n    <div className=\"grid-timeline game-timeline\">\n      {rounds.map((round, index) => (\n        <div key={`counter-${round}-${index}`} className=\"game-timeline__round\">\n          <span className=\"game-timeline__round-number\">{round}</span>\n          <FolderSpecial\n            className=\"round-marker\"\n            style={game.turn - 1 === index ? { color: yellow[50] } : { color: green[500] }}\n            fontSize=\"large\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default GameTimeline;\n","import React from 'react';\n\nimport gameEngine from '../engine';\n\nconst GameInstructions = () => {\n  const texts = gameEngine.dialog.split('<br>');\n\n  return (\n    <div className=\"grid-instructions dialog-container\">\n      <h3>Instructions</h3>\n      <div className=\"dialog-box\">\n        {texts.map((text) => (\n          <p key={text}>{text}</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GameInstructions;\n","import React from 'react';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nconst GameChat = () => {\n  // Global state\n  const [game] = useGlobalState('game');\n\n  return (\n    <div className=\"grid-chat game-chat\">\n      {game.messages &&\n        game.messages.map((messageEntry, index) => {\n          if (messageEntry.user === gameEngine.me) {\n            return (\n              <div key={`${messageEntry.clue}-${index}`} className=\"message message-mine\">\n                <span className=\"message-text\">\n                  {messageEntry.clue}, {messageEntry.number}\n                </span>\n              </div>\n            );\n          }\n\n          return (\n            <div key={`${messageEntry.clue}-${index}`} className=\"message message-their\">\n              <span className=\"message-text\">\n                {messageEntry.clue}, {messageEntry.number}\n              </span>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default GameChat;\n","import React from 'react';\n\nimport cardAgent from '../images/card-agent.jpg';\nimport cardAssassin from '../images/card-assassin.jpg';\nimport cardBystander from '../images/card-bystander.jpg';\n\nimport gameEngine from '../engine';\n\nconst getImageSource = (keyClass) => {\n  switch (keyClass) {\n    case 'agent':\n      return cardAgent;\n    case 'assassin':\n      return cardAssassin;\n    default:\n      return cardBystander;\n  }\n};\n\nconst Card = ({ codename, codenameID, type, size, keyClass, isButton, state }) => {\n  const imageSource = getImageSource(keyClass);\n\n  if (isButton) {\n    return (\n      <button\n        className={`codename codename--button codename--${type} codename--${size} codename--${keyClass}`}\n        onClick={() => gameEngine.submitGuess(codenameID)}\n      >\n        <InnerCard codename={codename} state={state} imageSource={imageSource} type={type} />\n      </button>\n    );\n  }\n  return (\n    <div className={`codename codename--${type} codename--${size} codename--${keyClass}`}>\n      <InnerCard codename={codename} state={state} imageSource={imageSource} type={type} />\n    </div>\n  );\n};\n\nconst InnerCard = ({ codename, state, imageSource, type }) => {\n  switch (state) {\n    case 'revealed-me':\n      return (\n        <>\n          <img className=\"codename__background\" src={imageSource} alt={imageSource} />\n          {type === 'word' && <span className=\"codename__word\">{codename}</span>}\n          {type === 'word' && <span className=\"codename__word-updsidedown\">{codename}</span>}\n        </>\n      );\n    case 'revealed-you':\n      return (\n        <>\n          <img className=\"codename__background\" src={imageSource} alt={imageSource} />\n          {type === 'word' && <span className=\"codename__word\">{codename}</span>}\n          {type === 'word' && <span className=\"codename__word-updsidedown\">{codename}</span>}\n        </>\n      );\n    default:\n      return (\n        <>\n          <img className=\"codename__background\" src={imageSource} alt={imageSource} />\n          {type === 'word' && <span className=\"codename__word\">{codename}</span>}\n          {type === 'word' && <span className=\"codename__word-updsidedown\">{codename}</span>}\n        </>\n      );\n  }\n};\n\nexport default Card;\n","import React from 'react';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport Card from './Card';\n\nimport { getKeyClass } from '../utils';\n\nconst GameBoard = () => {\n  // Global States\n  const [game] = useGlobalState('game');\n\n  const showButtons = game.phase === 'guessing' && gameEngine.turnRole === 'passive';\n\n  return (\n    <div className=\"grid-gameboard codenames-grid\">\n      {game.codenames.map((codename, index) => {\n        const keyClass = getKeyClass(index, gameEngine.myDatabaseIndex, game.keyCard);\n        const state = '';\n        const isButton = showButtons && !state.startsWith('revaled');\n        return (\n          <Card\n            key={codename}\n            codename={codename}\n            codenameID={index}\n            type=\"word\"\n            size={5}\n            keyClass={keyClass}\n            isButton={isButton}\n            state={state}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React, { useState } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport SendIcon from '@material-ui/icons/Send';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nconst NOOP = () => console.log('OK');\n\nconst GameActions = () => {\n  // Global state\n  const [game] = useGlobalState('game');\n  // Local state\n  const [clue, setClue] = useState({ clue: null, number: null });\n\n  const handleClue = (type, value) => {\n    if (value) {\n      if (type === 'clue') {\n        setClue({ ...clue, clue: value });\n      } else if (type === 'number') {\n        setClue({ ...clue, number: value });\n      }\n    }\n  };\n\n  const handleSubmitClue = () => {\n    gameEngine.submitClue(clue);\n  };\n\n  const isClueReady = clue.clue && !clue.clue.includes(' ') && clue.number >= 0;\n\n  return (\n    <div className=\"grid-actions game-actions\">\n      {game.phase === 'setup' && (\n        <div className=\"game-actions__actions game-actions__actions--setup\">\n          <Button\n            className=\"mui-block\"\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ background: green[500] }}\n            onClick={() => gameEngine.setTurnOrder()}\n          >\n            I want to start!\n          </Button>\n        </div>\n      )}\n\n      {game.phase === 'clue-giving' && gameEngine.turnRole === 'active' && (\n        <div className=\"game-actions__actions game-actions__actions--clue-giving\">\n          <TextField\n            className=\"block\"\n            id=\"clue\"\n            label=\"Clue\"\n            inputProps={{ autocomplete: 'off' }}\n            onChange={(e) => handleClue('clue', e.target.value)}\n          />\n          <TextField\n            id=\"filled-number\"\n            label=\"Number\"\n            type=\"number\"\n            inputProps={{ min: '0', max: '25', step: '1' }}\n            onChange={(e) => handleClue('number', +e.target.value)}\n          />\n          <Button\n            className=\"block\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!isClueReady}\n            style={{ background: green[500] }}\n            onClick={handleSubmitClue}\n          >\n            <SendIcon />\n          </Button>\n        </div>\n      )}\n\n      {game.phase === 'guessing' && gameEngine.turnRole === 'passive' && (\n        <div className=\"game-actions__actions game-actions__actions--guessing\">\n          <Button\n            className=\"block\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={false}\n            style={{ background: green[500] }}\n            onClick={() => NOOP()}\n          >\n            PASS\n          </Button>\n        </div>\n      )}\n\n      {((game.phase === 'clue-giving' && gameEngine.turnRole === 'passive') ||\n        (game.phase === 'guessing' && gameEngine.turnRole === 'active')) && (\n        <div className=\"game-actions__actions game-actions__actions--waiting\">\n          <CircularProgress style={{ color: green[500] }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameActions;\n","import React, { useEffect } from 'react';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport GameTimeline from './GameTimeline';\nimport GameInstructions from './GameInstructions';\nimport GameChat from './GameChat';\nimport GameBoard from './GameBoard';\nimport GameActions from './GameActions';\n\nconst GameSession = () => {\n  // Global states\n  const [, setDialog] = useGlobalState('dialog');\n\n  const { dialog } = gameEngine;\n\n  useEffect(() => {\n    setDialog({ isVisible: true, duration: 'long', message: dialog });\n  }, [dialog, setDialog]);\n\n  return (\n    <div className=\"game-content game-session\">\n      <GameTimeline />\n      <GameInstructions />\n      <GameBoard />\n      <GameChat />\n      <GameActions />\n    </div>\n  );\n};\n\nexport default GameSession;\n","import React, { useEffect } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\n\nimport gameEngine from '../engine';\nimport toastService from '../toastService';\nimport useGlobalState from '../useGlobalState';\nimport { isEveryoneOnline } from '../utils';\n\nconst GameWaitingRoom = () => {\n  const [dbRef] = useGlobalState('dbRef');\n  const [game] = useGlobalState('game');\n  const [, setGameID] = useGlobalState('gameID');\n  const [nickname] = useGlobalState('nickname');\n  const [online] = useGlobalState('online');\n  const [, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n  const [, setDialog] = useGlobalState('dialog');\n\n  // Set your nickname on mount\n  useEffect(() => {\n    try {\n      if (dbRef && !gameEngine.amISet) {\n        gameEngine.setPlayer(nickname);\n      }\n    } catch (err) {\n      setToast(toastService.error(toast, 'Game is full, try a different game ID'));\n      setGameID(null);\n      setScreen('home');\n    }\n  }, [dbRef, nickname, setGameID, setScreen, setToast, toast]);\n\n  // Whenever game has two players, go to pre-game\n  useEffect(() => {\n    if (!gameEngine.me) {\n      gameEngine.setMe(nickname);\n    }\n\n    if (isEveryoneOnline(online)) {\n      setScreen('game.stage.setup');\n      setDialog({ isVisible: true, duration: 'long', message: gameEngine.dialog });\n    }\n  }, [game, setScreen, nickname, online, setDialog]);\n\n  return (\n    <div className=\"game-content game-waiting-room\">\n      <CircularProgress style={{ color: green[500] }} />\n      <div className=\"game-waiting-room__message\">Hi, {nickname}</div>\n      <div className=\"game-waiting-room__message\">Waiting for another player to join...</div>\n    </div>\n  );\n};\n\nexport default GameWaitingRoom;\n","import React, { useEffect } from 'react';\n\nimport API from '../api';\nimport gameEngine from '../engine';\nimport toastService from '../toastService';\nimport useGlobalState from '../useGlobalState';\n\nimport GameHeader from './GameHeader';\nimport GameSession from './GameSession';\nimport GameWaitingRoom from './GameWaitingRoom';\n\nconst Game = () => {\n  // Global States\n  const [dbRef, setDbRef] = useGlobalState('dbRef');\n  const [game, setGame] = useGlobalState('game');\n  const [gameID, setGameID] = useGlobalState('gameID');\n  const [, setIsLoading] = useGlobalState('isLoading');\n  const [screen, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n  const [, setOnline] = useGlobalState('online');\n\n  // Create database reference\n  useEffect(() => {\n    if (game.gameID === null && gameID) {\n      setIsLoading(true);\n\n      API.ref(`codenombre/${gameID}`).once('value', (snap) => {\n        if (snap.val()) {\n          const firebaseReference = API.ref().child('codenombre').child(gameID);\n          gameEngine.setGameID(gameID);\n          gameEngine.setDbRef(firebaseReference);\n          setGame(gameEngine.update(snap.val()));\n          setDbRef(firebaseReference);\n        } else {\n          setGameID(null);\n          gameEngine.setGameID(null);\n          setToast(toastService.error(toast, 'Failed to start game session'));\n          setScreen('home');\n        }\n\n        setGame(gameEngine.state);\n        setIsLoading(false);\n      });\n    }\n  }, [game.gameID, gameID, setDbRef, setGame, setGameID, setIsLoading, setScreen, setToast, toast]);\n\n  useEffect(() => {\n    if (dbRef) {\n      const handleGameState = (snap) => {\n        setIsLoading(true);\n        if (snap.val()) {\n          setGame(gameEngine.update(snap.val()));\n          setOnline(gameEngine.updateOnline());\n        }\n        setIsLoading(false);\n      };\n\n      dbRef.on('value', handleGameState);\n\n      const handleGameDisconnect = (snap) => {\n        setIsLoading(false);\n        setToast(toastService.info(toast, 'Server disconnected'));\n        setScreen('home');\n      };\n\n      return () => {\n        dbRef.off('value', handleGameDisconnect);\n      };\n    }\n  }, [dbRef, setGame, setIsLoading, setScreen, setToast, toast, setOnline]);\n\n  return (\n    <div className=\"game\">\n      <GameHeader gameID={gameID} />\n      {screen === 'game.waiting' && <GameWaitingRoom />}\n      {screen.startsWith('game.stage') && <GameSession />}\n    </div>\n  );\n};\n\nexport default Game;\n","class LocalStorageService {\n  constructor() {\n    this.store = {\n      nickname: '',\n      gameID: '',\n    };\n    this.isLoaded = false;\n\n    this.init();\n  }\n\n  init() {\n    this.load();\n    return this.get();\n  }\n\n  get(key) {\n    if (!this.isLoaded) {\n      this.load();\n    }\n\n    if (key) {\n      return this.store[key] || null;\n    }\n\n    return this.store;\n  }\n\n  load() {\n    const localStorage = JSON.parse(window.localStorage.getItem('codenombre'));\n\n    if (localStorage) {\n      this.store = localStorage;\n      this.isLoaded = true;\n    }\n  }\n\n  set(value) {\n    if (!this.isLoaded) {\n      this.load();\n    }\n\n    const type = typeof value;\n    if (type !== 'string' && type !== 'object') {\n      console.error('localStorage set value must be a string or a key-value object');\n      return;\n    }\n\n    // When value is a string, use as a property toggle\n    if (typeof value === 'string') {\n      this.store[value] = !this.store[value];\n    } else {\n      // Remove any null or undefined property\n      Object.entries(value).forEach(([key, item]) => {\n        if (item === null || item === undefined) {\n          delete value[key];\n        }\n      });\n\n      this.store = {\n        ...this.store,\n        ...value,\n      };\n    }\n\n    this.save();\n  }\n\n  save() {\n    if (this.notLoaded) {\n      this.load();\n    }\n\n    window.localStorage.setItem('codenombre', JSON.stringify(this.store));\n    this.load();\n  }\n\n  getDefaults() {\n    return [this.store.gameID, this.store.nickname];\n  }\n\n  setDefaults(gameID, nickname) {\n    this.set({\n      gameID,\n      nickname,\n    });\n  }\n}\n\nexport default new LocalStorageService();\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\n\nconst HomeHeader = ({ gameID }) => {\n  return (\n    <AppBar className=\"header\" position=\"static\">\n      <div className=\"header__game-id\">Welcome to</div>\n      <h1>CODENOMBRE</h1>\n    </AppBar>\n  );\n};\n\nexport default HomeHeader;\n","import React, { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport TextField from '@material-ui/core/TextField';\nimport { green } from '@material-ui/core/colors';\n\nimport API from '../api';\nimport useGlobalState from '../useGlobalState';\nimport localStorageService from '../localStorage';\n\nconst HomeJoin = ({ tempGameID, setTempGameID, tempNickname }) => {\n  // Global States\n  const [gameID, setGameID] = useGlobalState('gameID');\n  const [isLoading, setIsLoading] = useGlobalState('isLoading');\n  const [nickname, setNickname] = useGlobalState('nickname');\n  const [, setScreen] = useGlobalState('screen');\n  // Local States\n  const [isValidGameID, setIsValidGameID] = useState(false);\n  const [isValidNickname, setIsValidNickname] = useState(false);\n  const [errorGameID, setErrorGameID] = useState('');\n\n  // On Mount\n  useEffect(() => {\n    if (tempNickname) {\n      setNickname(tempNickname);\n    }\n  });\n\n  // On Update\n  useEffect(() => {\n    // Check if game exists\n    if (gameID !== tempGameID && tempGameID?.length === 4) {\n      setIsLoading(true);\n\n      API.ref(`codenombre/${tempGameID.toUpperCase()}`).once('value', (snap) => {\n        if (snap.val()) {\n          setGameID(tempGameID.toUpperCase());\n          setIsValidGameID(true);\n          setErrorGameID('');\n        } else {\n          setErrorGameID('Provided Game ID does not exist. Try again.');\n          setIsValidGameID(false);\n        }\n        setIsLoading(false);\n      });\n    }\n\n    if (tempGameID?.length < 4) {\n      setIsValidGameID(false);\n    }\n\n    if (tempGameID === gameID) {\n      setIsValidGameID(true);\n      setErrorGameID('');\n    }\n\n    // Check if nickname is valid\n    if (nickname?.length >= 3 || tempNickname?.length >= 3) {\n      setIsValidNickname(true);\n    } else {\n      setIsValidNickname(false);\n    }\n  }, [\n    gameID,\n    tempGameID,\n    setGameID,\n    setIsValidGameID,\n    setIsLoading,\n    nickname,\n    setIsValidNickname,\n    tempNickname,\n  ]);\n\n  const goToWaitingRoom = () => {\n    localStorageService.setDefaults(gameID, nickname);\n    setScreen('game.waiting');\n  };\n\n  const goToCreateGame = () => {\n    setScreen('home.create');\n  };\n\n  return (\n    <div className=\"home-section join-game\">\n      <TextField\n        className=\"mui-full-width\"\n        required\n        id=\"game-id\"\n        label=\"Game ID\"\n        defaultValue={tempGameID}\n        onChange={(e) => setTempGameID(e.target.value)}\n        helperText={errorGameID}\n        inputProps={{ maxLength: '4' }}\n      />\n      <TextField\n        className=\"mui-full-width\"\n        required\n        id=\"nickname\"\n        label=\"Nickname\"\n        defaultValue={tempNickname}\n        onChange={(e) => setNickname(e.target.value)}\n        inputProps={{ maxLength: '8' }}\n        helperText={\n          nickname && !isValidNickname ? 'Nickname must be at least 3 characters long.' : ''\n        }\n      />\n\n      <div>{isLoading && <LinearProgress style={{ background: green[800] }} />}</div>\n\n      <Button\n        className=\"mui-block\"\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={!isValidNickname || !isValidGameID}\n        onClick={() => goToWaitingRoom()}\n        style={{ background: green[500] }}\n      >\n        Join {gameID}\n      </Button>\n      <div className=\"home-section home-secion--separator\">- or -</div>\n      <div className=\"home-section create-game\">\n        <Button\n          className=\"block\"\n          variant=\"contained\"\n          color=\"default\"\n          onClick={() => goToCreateGame()}\n        >\n          Create a Game\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default HomeJoin;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { green } from '@material-ui/core/colors';\n\nimport API from '../api';\nimport GameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\nimport { generadeID } from '../utils';\nimport toastService from '../toastService';\n\nconst HomeCreate = ({ setTempGameID }) => {\n  // Global States\n  const [isLoading, setIsLoading] = useGlobalState('isLoading');\n  const [, setScreen] = useGlobalState('screen');\n  const [toast, setToast] = useGlobalState('toast');\n  // Local States\n  const [gameMode, setGameMode] = useState('classic');\n  const [gameDifficulty, setGameDifficulty] = useState('normal');\n\n  const createGame = () => {\n    setIsLoading(true);\n    const id = generadeID();\n    const state = GameEngine.init(id, gameMode, gameDifficulty);\n\n    try {\n      API.ref('/codenombre').update({\n        [id]: {\n          ...state,\n        },\n      });\n      setTempGameID(id);\n      setToast(toastService.success(toast, `Game created successfully. ID: ${id}`));\n      setIsLoading(false);\n      setScreen('home');\n    } catch {\n      setToast(toastService.error(toast, 'Creating game has failed'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"home-section create-game\">\n      <FormControl component=\"fieldset\">\n        <FormLabel component=\"legend\" className=\"create-game-label\">\n          Game Type\n        </FormLabel>\n        <RadioGroup name=\"game-type\" value={gameMode} onChange={(e) => setGameMode(e.target.value)}>\n          <FormControlLabel value=\"classic\" control={<Radio />} label=\"Classic\" />\n          <FormControlLabel value=\"simple\" disabled control={<Radio />} label=\"Simple\" />\n          <FormControlLabel value=\"pictures\" disabled control={<Radio />} label=\"Pictures\" />\n          <FormControlLabel value=\"dixit\" disabled control={<Radio />} label=\"Dixit\" />\n          <FormControlLabel value=\"deception\" disabled control={<Radio />} label=\"Deception\" />\n        </RadioGroup>\n        <FormLabel component=\"legend\" className=\"create-game-label\">\n          Difficulty\n        </FormLabel>\n        <RadioGroup\n          name=\"game-difficulty\"\n          value={gameDifficulty}\n          onChange={(e) => setGameDifficulty(e.target.value)}\n        >\n          <FormControlLabel value=\"easy\" control={<Radio />} label=\"Easy\" />\n          <FormControlLabel value=\"normal\" control={<Radio />} label=\"Normal\" />\n        </RadioGroup>\n      </FormControl>\n      <Button\n        className=\"mui-block\"\n        variant=\"contained\"\n        color=\"primary\"\n        style={{ background: green[500] }}\n        onClick={() => createGame()}\n        disabled={isLoading}\n      >\n        Create {gameMode} game\n      </Button>\n      <Button\n        className=\"mui-block create-game-back-button\"\n        color=\"default\"\n        onClick={() => setScreen('home')}\n      >\n        Back\n      </Button>\n    </div>\n  );\n};\n\nexport default HomeCreate;\n","import React, { useState } from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport localStorageService from '../localStorage';\n\nimport HomeHeader from './HomeHeader';\nimport HomeJoin from './HomeJoin';\nimport HomeCreate from './HomeCreate';\n\nconst Home = () => {\n  // Local Storage State\n  const [lsGameID, lsNickname] = localStorageService.getDefaults();\n  // Global States\n  const [screen] = useGlobalState('screen');\n  // Dependable States\n  const [tempGameID, setTempGameID] = useState(lsGameID);\n  const [tempNickname] = useState(lsNickname);\n\n  return (\n    <div className=\"home\">\n      <HomeHeader />\n      <div className=\"home-content\">\n        {screen === 'home' && (\n          <HomeJoin\n            tempGameID={tempGameID}\n            setTempGameID={setTempGameID}\n            tempNickname={tempNickname}\n          />\n        )}\n        {screen === 'home.create' && (\n          <HomeCreate tempGameID={tempGameID} setTempGameID={setTempGameID} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\n\nimport useGlobalState from '../useGlobalState';\n\nconst Toast = () => {\n  // Global States\n  const [toast, setToast] = useGlobalState('toast');\n\n  const handleClose = () => {\n    setToast({\n      ...toast,\n      isVisible: false,\n    });\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      open={toast.isVisible}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity={toast.severity}>\n        {toast.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default Toast;\n","import React, { Fragment } from 'react';\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport gameEngine from '../engine';\nimport useGlobalState from '../useGlobalState';\n\nimport Game from './Game';\nimport Home from './Home';\nimport PopUp from './PopUp';\nimport Toast from './Toast';\n\nconst App = () => {\n  // Global States\n  const [isLoading] = useGlobalState('isLoading');\n  const [screen] = useGlobalState('screen');\n\n  return (\n    <Fragment>\n      <Container maxWidth=\"lg\" className=\"full-screen\">\n        {isLoading ? <LinearProgress /> : <div className=\"progress-bar-placeholder\" />}\n        {screen.startsWith('home') && <Home />}\n        {screen.startsWith('game') && <Game />}\n      </Container>\n      <Toast />\n      <PopUp />\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"mock-buttons\">\n          <button onClick={() => gameEngine.mock('setup')}>Mock Setup</button>\n          <button onClick={() => gameEngine.mock('turn1.clue-giving')}>Mock 1 clue</button>\n          <button onClick={() => gameEngine.mock('turn1.guessing')}>Mock 1 guessing</button>\n          <button onClick={() => gameEngine.mock('turn2.clue-giving')}>Mock 2 clue</button>\n          <button onClick={() => gameEngine.mock('turn2.guessing')}>Mock 2 guessing</button>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n// import Home from './components/Home';\n// import Admin from './components/Admin';\n// import Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\n// function Container() {\n//   return (\n//     <Router>\n//       <App>\n//         <Switch>\n//           <Route path=\"/create\" component={Admin} />\n//           <Route path=\"/:gameid\" component={Game} />\n//           <Route exact path=\"/\" component={Home} />\n//         </Switch>\n//       </App>\n//     </Router>\n//   );\n// }\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/card-agent.f0e3c1ab.jpg\";","module.exports = __webpack_public_path__ + \"static/media/card-assassin.8914189c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/card-bystander.c3509259.jpg\";"],"sourceRoot":""}